[{"url":"/2019/04/01/MySQL SQL语句中IN 和 EXISTS的区别和使用场景/","content":"## MySQL SQL语句中IN 和 EXISTS的区别和使用场景\n\n转载：https://blog.csdn.net/wqc19920906/article/details/79800374\n\n### IN 语句：只执行一次\n\n确定给定的值是否与子查询或列表中的值相匹配。\n\nin在查询的时候，首先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选。所以相对内表比较小的时候，in的速度较快。\n\n###EXISTS语句：执行外表结果.length次\n\n指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的。匹配上就将结果放入结果集中。\n\n使用exists关键字进行查询的时候，首先，我们先查询的不是子查询的内容，而是查我们的主查询的表。\n\n然后，根据表的每一条记录，执行以下语句，依次去判断where后面的条件是否成立。\n\n如果成立则返回true不成立则返回false。如果返回的是true的话，则该行结果保留，如果返回的是false的话，则删除该行，最后将得到的结果返回。\n\n###区别及应用场景\n\nin 和 exists的区别: \n\n1. 如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in。\n2.  反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。\n3. 其实我们区分in和exists主要是造成了驱动顺序的改变(这是性能变化的关键)，如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询，所以我们会以驱动表的快速返回为目标，那么就会考虑到索引及结果集的关系了 。\n4. IN时不对NULL进行处理。\n5. in 是把外表和内表作hash 连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询。\n6. 一直以来认为exists比in效率高的说法是不准确的。\n\n###not in 和not exists\n\n​    如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。\n\n### 场景示例\n\n1. IN 查询示例\n\n```\nselect * from A\nwhere id in(select id from B)\n```\n\n查询过程类似于以下过程\n\n```\nList resultSet=[];\nArray A=(select * from A);\nArray B=(select id from B);\n\nfor(int i=0;i<A.length;i++) {\n   for(int j=0;j<B.length;j++) {\n      if(A[i].id==B[j].id) {\n         resultSet.add(A[i]);\n         break;\n      }\n   }\n}\nreturn resultSet;\n```\n\n2. exists 查询示例\n\n```\nselect a.* from A a \nwhere exists(select 1 from B b where a.id=b.id)\n```\n\n查询过程类似于以下过程\n\n```\nList resultSet=[];\nArray A=(select * from A)\n\nfor(int i=0;i<A.length;i++) {\n   if(exists(A[i].id) {    //执行select 1 from B b where b.id=a.id是否有记录返回\n       resultSet.add(A[i]);\n   }\n}\nreturn resultSet;\n```\n\n3. exists 在子查询中使用 NULL 仍然返回结果集\n\nselect * from TableIn where exists(select null)\n等同于： select * from TableIn\n\n4. \n\n```\nusers表有1000条记录，id自增，id都大于0\n\nselect * from users where exists (select * from users limit 0); --输出1000条记录\n\nselect * from users where exists (select * from users where id < 0); --输出0条记录\n```\n\nexists查询的本质，只要碰到有记录，则返回true；所以limit根本就不会去管，或者说执行不到。\n\n5. exists不可以完全代替in\n\n```\n--没有关联字段的情况：枚举常量\nselect * from areas where id in (4, 5, 6);\n\n--没有关联字段的情况：这样exists对子查询，要么全true，要么全false\nselect * from areas where id in (select city_id from deals where deals.name = 'xxx'); \n```\n\n6. exists 优化\n\n在许多基于基础表的查询中，为了满足一个条件，往往需要对另一个表进行联接。 \n在这种情况下，使用exists(或not exists)通常将提高查询的效率。\n\n```\n（低效） \nselect ... from table1 t1 where t1.id > 10 and pno in (select no from table2 where name like 'www%'); \n（高效） \nselect ... from table1 t1 where t1.id > 10 and exists (select 1 from table2 t2 where t1.pno = t2.no and name like 'www%'); \n```\n\n7. 用not exists替代not in\n\n在子查询中，not in子句将执行一个内部的排序和合并。 \n无论在哪种情况下，not in都是最低效的 (因为它对子查询中的表执行了一个全表遍历)。 \n为了避免使用not in，我们可以把它改写成外连接(Outer Joins)或not exists。 \n\n8. 用exists替换distinct\n\n当提交一个包含一对多表信息的查询时,避免在select子句中使用distinct. 一般可以考虑用exists替换 \n\nexists使查询更为迅速,因为RDBMS核心模块将在子查询的条件一旦满足后,立刻返回结果.\n\n```\n（低效） \nselect distinct d.dept_no, d.dept_name from t_dept d, t_emp e where d.dept_no = e.dept_no; \n（高效） \nselect d.dept_no, d.dept_name from t_dept d where exists (select 1 from t_emp where d.dept_no = e.dept_no); \n```\n\n9. 用表连接替换exists\n\n```\n（低效） \nselect ename from emp e where exists (select 1 from dept where dept_no = e.dept_no and dept_cat = 'W'); \nSELECT ENAME \n（高效） \nselect ename from dept d, emp e where e.dept_no = d.dept_no and dept_cat = 'W'; \n```\n\n"},{"title":"echoip步骤","url":"/2019/03/18/echoip步骤/","content":"\n## Contos 环境 Docker安装 **echoip**步骤\n\n背景：因为最近的一些个人的想法，恰好需要使用根据Ip获取地理位置，在百度和Google中查询了很多种接口，要么收费，要么有次数限制，萌新囊中羞涩，故而使用https://github.com/mpolden/echoip 这个服务了，并且使用了Docker 部署的方式进行使用。在部署过程中踩了很多坑，故进而记录，以防以后使用。\n\n### 环境准备\n\n#### 首先要安装docker环境，并运行起来。\n\n```\nuname -r\n```\n\nDocker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。\n\n安装一些必要的系统工具\n\n```\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n添加软件源信息：\n\n```\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n更新 yum 缓存：\n\n```\nsudo yum makecache fast\n```\n\n安装 Docker-ce：\n\n```\nsudo yum -y install docker-ce\n```\n\n启动 Docker 后台服务\n\n```\nsudo systemctl start docker\n```\n\n测试运行 hello-world\n\n```\ndocker run hello-world\n```\n\n#### 安装git\n\n```\nsudo yum install git\n```\n\n安装Vim\n\n```\nsudo yum install vim\n```\n\n\n\n### Install docker-ce\n\nClone the project\n\n```\ngit clone https://github.com/alaluces/Docker-EchoIP.git echoip\ncd echoip\n```\n\nDownload the geoip db and extract to geoip folder\n\n```\ncd geoip\nwget https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz\nwget https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz\ntar xvf GeoLite2-City.tar.gz\ntar xvf GeoLite2-Country.tar.gz\nmv GeoLite2-City_20190318/GeoLite2-City.mmdb ..\nmv GeoLite2-Country_20190318/GeoLite2-Country.mmdb ..\n\n```\n\nEdit the startup script to modify your preferences\n\n```\nvim start.sh\n\nApplication Options:\n  -f, --country-db=FILE        Path to GeoIP country database\n  -c, --city-db=FILE           Path to GeoIP city database\n  -l, --listen=ADDR            Listening address (default: :8080)\n  -r, --reverse-lookup         Perform reverse hostname lookups\n  -p, --port-lookup            Enable port lookup\n  -t, --template=FILE          Path to template (default: index.html)\n  -H, --trusted-header=NAME    Header to trust for remote IP, if present (e.g. X-Real-IP)\n\nHelp Options:\n  -h, --help                   Show this help message\n```\n\nBuild the container\n\n```\ndocker build -t echoip .\n```\n\nRun the image you built\n\n```\ndocker run -d --rm --name echoip -p8080:8080 echoip\n```\n\nIf built successfully, it can be viewed on:\n\n```\nhttp://ip:8080/json\n```\n\n![gratisography-ski-lift-summer.jpg](https://i.loli.net/2019/03/18/5c8fb80fb113e.jpg)"},{"title":"2019，重新开始","url":"/2019/03/14/2019，重新开始/","content":"\n##                                 2019，重新开始\n\n​    2019，北漂第四年，重新选择，重新开始。要做的事情很多，之前的想法要在这一年中一件一件的实现，首先就是创建一个自己的博客，虽然，有这个想法有好长时间，一直没有落地，终于在昨天把博客搭建起来了，算一个开始。"}]