{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-casper/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/css/markdown.css","path":"css/markdown.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/fonts/lg.svg","path":"fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/fonts/lg.ttf","path":"fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/fonts/lg.woff","path":"fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/fonts/lg.eot","path":"fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/img/video-play.png","path":"img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/img/vimeo-play.png","path":"img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/img/youtube-play.png","path":"img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/css/lightgallery.min.css","path":"css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/css/screen.css","path":"css/screen.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/css/allinone.min.css","path":"css/allinone.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/lightgallery.min.js","path":"js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/post.js","path":"js/post.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/sw-test.js","path":"js/sw-test.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/post.min.js","path":"js/post.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/home-lazy-local.min.js","path":"js/mix/home-lazy-local.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/home-lazy-local.js","path":"js/mix/home-lazy-local.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-lazy.js","path":"js/mix/post-lazy.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-lazy-local.min.js","path":"js/mix/post-lazy-local.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-lazy.min.js","path":"js/mix/post-lazy.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-local.js","path":"js/mix/post-local.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-local.min.js","path":"js/mix/post-local.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-lazy-local.js","path":"js/mix/post-lazy-local.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9d6453709b0da43491d9343bb1ee30a66c42ccd2","modified":1554387967004},{"_id":"themes/hexo-casper/.DS_Store","hash":"51e6f189639ec02456207ab0ad71930160ceaa60","modified":1552922507965},{"_id":"themes/hexo-casper/README.md","hash":"148e9f382ea6f4629ccb394f2903c2ca27642b84","modified":1552490356287},{"_id":"themes/hexo-casper/_config.yml","hash":"10ea85ccbd2818993e4a82dcfd8ebe1f5e1bd93d","modified":1554217740860},{"_id":"source/about/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1552922438141},{"_id":"source/about/index.md","hash":"17c85e279335827b58474cf0b0f1d13f570d1f8e","modified":1552575460034},{"_id":"source/_posts/2019，重新开始.md","hash":"33c81ff8c12919140fdd4cfce60aba3cceed63f0","modified":1552573294763},{"_id":"source/_posts/.DS_Store","hash":"d072947f3d4ea2260827d1e2ee03f250e4d1f18f","modified":1554906429401},{"_id":"source/_posts/MySQL语句中IN和EXISTS的区别和使用场景.md","hash":"d4c26135e44b83d5e57ffd7f46352010144f963e","modified":1554217914274},{"_id":"source/_posts/Contos 环境 Docker安装echoip步骤.md","hash":"5bcb15c6da67164b067e16c1282292896df91083","modified":1554132989631},{"_id":"source/_posts/Java关于空指针的防范与思考.md","hash":"1c738c3eb18682f10df6c6d6177cd0382207a534","modified":1554770326488},{"_id":"source/_posts/docker小白入门篇.md","hash":"d5121fb5751c3924b3852e4a59f017bebb33e225","modified":1554387599141},{"_id":"themes/hexo-casper/.git/FETCH_HEAD","hash":"038e9f3d4d373bf8a4bf5b86f6b6b609a058820f","modified":1552490404362},{"_id":"themes/hexo-casper/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1552490356274},{"_id":"themes/hexo-casper/.git/ORIG_HEAD","hash":"842a2878a55cb57378a975ce849f6aae582eb667","modified":1552490404377},{"_id":"themes/hexo-casper/.git/config","hash":"83f20bf28ee865de52622250e5e982bc3c9464eb","modified":1552490356276},{"_id":"themes/hexo-casper/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1552490320518},{"_id":"themes/hexo-casper/.git/index","hash":"63d2a8ec111b78833310fe07ebd27fc56bba787c","modified":1552490356310},{"_id":"themes/hexo-casper/.git/packed-refs","hash":"84656919956e45a827cdfa8b799b76a4dc37c1d4","modified":1552490356272},{"_id":"themes/hexo-casper/languages/default.yml","hash":"0727744d43e06abe5780bb0d8ebe428d216cac38","modified":1552490356288},{"_id":"themes/hexo-casper/languages/fr.yml","hash":"5628a766e38663f45e288a7fb0ce578941dc4e79","modified":1552490356288},{"_id":"themes/hexo-casper/languages/nl.yml","hash":"865639ff72be884c40bbcc1ea2477d50a3549b12","modified":1552490356288},{"_id":"themes/hexo-casper/languages/no.yml","hash":"637efbc95bc1386d3bb3edfb1a0942524bc6bc8c","modified":1552490356288},{"_id":"themes/hexo-casper/languages/ru.yml","hash":"3d7e0d5429f9a88a01a08940f2ea44546b01ce42","modified":1552490356288},{"_id":"source/_posts/Mysql的时间比较和DATE-FORMAT踩的坑.md","hash":"474132ca1b095a25ca99da3840e7183ca56a9a44","modified":1554304305312},{"_id":"source/_posts/Mybatis的if-else.md","hash":"7b6d8278f971b24981f41433661f84883176c757","modified":1554906091928},{"_id":"source/_posts/SpringBoot的maven-git-commit-id-plugin使用.md","hash":"d635ce4276c6f64b18b185fe8ecfb1d137e8e602","modified":1554770359835},{"_id":"themes/hexo-casper/scripts/index.js","hash":"80f54fc982d875f1e0b52edaa7984c0c7a5ec71e","modified":1552490356300},{"_id":"themes/hexo-casper/languages/zh-TW.yml","hash":"949fa7fbc005b14e487f43eb85e77875bffcb39b","modified":1552490356288},{"_id":"themes/hexo-casper/layout/_layout.swig","hash":"9823c88e783d9a18284ca4058cc87c1e37d82559","modified":1552490356289},{"_id":"themes/hexo-casper/languages/zh-CN.yml","hash":"d219b9301ea4375b25675703fa14d1db8ca8bd9e","modified":1552490356288},{"_id":"themes/hexo-casper/layout/archive.swig","hash":"7cf2b42bdc60676b2d8426b636448622ab10e48e","modified":1552490356298},{"_id":"themes/hexo-casper/layout/category.swig","hash":"1d34d688741debf67066a598c0b7d6eacdc1805e","modified":1552490356298},{"_id":"themes/hexo-casper/layout/post.swig","hash":"85b2916c8c4c798435e799ae5d902ff8f5d5ac93","modified":1552490356299},{"_id":"themes/hexo-casper/layout/index.swig","hash":"bfee92ccc3f412977fc6382dbca1f18b6e948056","modified":1552490356298},{"_id":"themes/hexo-casper/layout/tag.swig","hash":"1358b7cbf816196d4cc00503e065d4f5cf0404af","modified":1552490356299},{"_id":"themes/hexo-casper/layout/page.swig","hash":"b99287ffe8565bb3d6e48d66061a6b171b20bc91","modified":1552490356299},{"_id":"themes/hexo-casper/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1552490320521},{"_id":"themes/hexo-casper/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1552490320525},{"_id":"themes/hexo-casper/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1552490320525},{"_id":"themes/hexo-casper/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1552490320524},{"_id":"themes/hexo-casper/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1552490320530},{"_id":"themes/hexo-casper/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1552490320529},{"_id":"themes/hexo-casper/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1552490320528},{"_id":"themes/hexo-casper/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1552490320523},{"_id":"themes/hexo-casper/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1552490320531},{"_id":"themes/hexo-casper/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1552490320526},{"_id":"themes/hexo-casper/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1552490320528},{"_id":"themes/hexo-casper/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1552490320517},{"_id":"themes/hexo-casper/.git/logs/HEAD","hash":"28ab3e1c5739670beac3d511db90fd7fe2f645a7","modified":1552490356275},{"_id":"themes/hexo-casper/layout/_partials/about.swig","hash":"9c919c057f6e47b4945f563d6a6cd288c71a4f7a","modified":1552490356289},{"_id":"themes/hexo-casper/layout/_partials/header.swig","hash":"791dce21cd531692c357e71f6c7fb2579063cc28","modified":1552490356291},{"_id":"themes/hexo-casper/layout/_partials/index.swig","hash":"df379070a30a63395abf99c530bac46952464ebc","modified":1552490356291},{"_id":"themes/hexo-casper/layout/_partials/javascript.swig","hash":"0e01ba0ca400ce2dd22c2d0d251ae096ecc1049c","modified":1552490356292},{"_id":"themes/hexo-casper/layout/_partials/footer.swig","hash":"8a49c94844ea130269eb995ff8f15859780399be","modified":1552490356290},{"_id":"themes/hexo-casper/layout/_partials/head.swig","hash":"51f688b8dd1ece8ba3728fdf469781448339ca74","modified":1552490356290},{"_id":"themes/hexo-casper/layout/_partials/page.swig","hash":"047a2a2c64d57648d0d1cf02768f4098fd3c6384","modified":1552490356292},{"_id":"themes/hexo-casper/layout/_partials/search.swig","hash":"9cfe07f165d4e57b98f5ef391aa68bee82cac98d","modified":1552490356297},{"_id":"themes/hexo-casper/layout/_partials/post.swig","hash":"a731e1e1460efc11965a97f880edbb59a5cf7545","modified":1552490356292},{"_id":"themes/hexo-casper/layout/_partials/widget.swig","hash":"131f2b9540d5f837fe1c7f64ac7005f48ecf14ab","modified":1552490356297},{"_id":"themes/hexo-casper/source/css/highlight.css","hash":"f24dc40cd6ecab543623896df89399ae03bd344e","modified":1552490356301},{"_id":"themes/hexo-casper/source/css/markdown.css","hash":"6a21a90bec15f27d0b6110e22f0a05b533ceac5e","modified":1552490356302},{"_id":"themes/hexo-casper/source/css/style.css","hash":"541c2b69aa3188553b1cab7eb47eec83c87e6c8c","modified":1552490356303},{"_id":"themes/hexo-casper/source/fonts/lg.svg","hash":"50a2216596766a48655e3f87e1d1000ba93bf8a1","modified":1552490356303},{"_id":"themes/hexo-casper/source/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1552490356304},{"_id":"themes/hexo-casper/source/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1552490356304},{"_id":"themes/hexo-casper/source/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1552490356303},{"_id":"themes/hexo-casper/source/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1552490356304},{"_id":"themes/hexo-casper/source/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1552490356305},{"_id":"themes/hexo-casper/source/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1552490356305},{"_id":"themes/hexo-casper/source/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1552490356305},{"_id":"themes/hexo-casper/source/js/lazyload.js","hash":"0b31dabace05042ee29f5989b0191e7e4072a88f","modified":1552490356306},{"_id":"themes/hexo-casper/source/css/lightgallery.min.css","hash":"9e76bdad163856774a96b1230a08dc506600a973","modified":1552490356302},{"_id":"themes/hexo-casper/source/css/screen.css","hash":"b649355ef90fb185fcad37ea8fb3d57f3117c88f","modified":1552490356302},{"_id":"themes/hexo-casper/source/css/allinone.min.css","hash":"960be7d7a204c1d479db4c89f6e58b8ff5d03f60","modified":1552490356301},{"_id":"themes/hexo-casper/source/js/lightgallery.min.js","hash":"35bac37c2343c1946d1af64254ec1ab98bb2c247","modified":1552490356306},{"_id":"themes/hexo-casper/source/js/local-search.js","hash":"652d22a71637c8e30cfa7356d5a8d5e402829421","modified":1552490356306},{"_id":"themes/hexo-casper/source/js/post.js","hash":"19c7b84fc868688ffa117bdb30c7b28833e35232","modified":1552490356309},{"_id":"themes/hexo-casper/source/js/sw-test.js","hash":"d01a7f14328e73f3578240e2a391c209e275912b","modified":1552490356309},{"_id":"themes/hexo-casper/source/js/post.min.js","hash":"4b22673d9f88c7beaccd86485e6e75fe87d4ac1d","modified":1552490356309},{"_id":"themes/hexo-casper/.git/refs/heads/master","hash":"842a2878a55cb57378a975ce849f6aae582eb667","modified":1552490356275},{"_id":"themes/hexo-casper/layout/_partials/widget/category.swig","hash":"932a26fca0534b185bff0b02d329db3768b3ba5e","modified":1552490356297},{"_id":"themes/hexo-casper/layout/_partials/widget/recent_posts.swig","hash":"9a08423189bf44d7a19ae6bf6314c5d537453291","modified":1552490356298},{"_id":"themes/hexo-casper/layout/_partials/widget/tagcloud.swig","hash":"8520b6d747b3daf800871be9163b23a784d668b4","modified":1552490356298},{"_id":"themes/hexo-casper/layout/_partials/public/fload-header.swig","hash":"9c7701a70020114672a1c51d1ebced3ddf860789","modified":1552490356293},{"_id":"themes/hexo-casper/layout/_partials/public/nav.swig","hash":"1b3ccfe6836d79ac04913552e0893885eb0600f0","modified":1552490356295},{"_id":"themes/hexo-casper/layout/_partials/public/social.swig","hash":"5c0d27bd616d38f32a8fbfeabf7eb1fe6a4fe8cd","modified":1552490356296},{"_id":"themes/hexo-casper/layout/_partials/public/toc.swig","hash":"30c6c3ca74d7b496e03ec856e8342515f73386d3","modified":1552490356297},{"_id":"themes/hexo-casper/source/js/mix/home-lazy-local.min.js","hash":"caa8f3748286b195621690690f8d0766c3fb7e4b","modified":1552490356307},{"_id":"themes/hexo-casper/source/js/mix/home-lazy-local.js","hash":"2bc5cc6ccfb5486ad1bbf616071ca141e238411d","modified":1552490356306},{"_id":"themes/hexo-casper/source/js/mix/post-lazy.js","hash":"a998a762da6a4f4d91bddd321f40303dc589636c","modified":1552490356308},{"_id":"themes/hexo-casper/source/js/mix/post-lazy-local.min.js","hash":"840ecd5212bf35f806fb6b7ec66e497f4aa309fb","modified":1552490356307},{"_id":"themes/hexo-casper/source/js/mix/post-lazy.min.js","hash":"de1a54a6f8279b49b83ba3c3a85a1794986bca52","modified":1552490356308},{"_id":"themes/hexo-casper/source/js/mix/post-local.js","hash":"8fde069fcd701c517aba18a1f85f631bac0a7774","modified":1552490356308},{"_id":"themes/hexo-casper/source/js/mix/post-local.min.js","hash":"24d7ed166c7757cd6b12c3e2621f83d39eb4dd78","modified":1552490356308},{"_id":"themes/hexo-casper/source/js/mix/post-lazy-local.js","hash":"f40f01965bcbde9388ef70b072b3822b68a8c00a","modified":1552490356307},{"_id":"themes/hexo-casper/.git/objects/pack/pack-cee1b0b0f29355ebf3a2f2fe13c824e7c7c0f03b.idx","hash":"06ed241d9c98f336f94754965acf31280e490a69","modified":1552490356249},{"_id":"themes/hexo-casper/.git/logs/refs/heads/master","hash":"28ab3e1c5739670beac3d511db90fd7fe2f645a7","modified":1552490356275},{"_id":"themes/hexo-casper/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1552490356274},{"_id":"themes/hexo-casper/layout/_partials/public/icons/avatar.svg","hash":"86217ef513f535a9864b59a93aa0bc2f9ab85378","modified":1552490356293},{"_id":"themes/hexo-casper/layout/_partials/public/icons/github.svg","hash":"21d7913a530ad2a835ba521e0c152f35cbaab4c1","modified":1552490356294},{"_id":"themes/hexo-casper/layout/_partials/public/icons/bilibili.svg","hash":"1c01318c13bf5440e305354992a7558e8ed02b26","modified":1552490356293},{"_id":"themes/hexo-casper/layout/_partials/public/icons/facebook.svg","hash":"c0addca4f00b849929b1ad5fa56663a12c11677a","modified":1552490356293},{"_id":"themes/hexo-casper/layout/_partials/public/icons/twitter.svg","hash":"540aa3b11d93e9677acd16211e8cdc5de817688e","modified":1552490356294},{"_id":"themes/hexo-casper/layout/_partials/public/icons/weibo.svg","hash":"89796272786fd0983f0c956ef39efb52e5956669","modified":1552490356295},{"_id":"themes/hexo-casper/layout/_partials/public/icons/telegram.svg","hash":"7ffdcca47a2de0c33deee9c6aa6cc77b48bc700b","modified":1552490356294},{"_id":"themes/hexo-casper/layout/_partials/public/icons/youtube.svg","hash":"d6a5cf004954676b2114a491e498936f9333ef7e","modified":1552490356295},{"_id":"themes/hexo-casper/.git/logs/refs/remotes/origin/HEAD","hash":"28ab3e1c5739670beac3d511db90fd7fe2f645a7","modified":1552490356274},{"_id":"themes/hexo-casper/.git/objects/pack/pack-cee1b0b0f29355ebf3a2f2fe13c824e7c7c0f03b.pack","hash":"119e91ce6b603c4d7228c440d2e17bb19375ebba","modified":1552490356247},{"_id":"public/sw.js","hash":"bf930db6cc0a8f49193eec9eb39a4136179e9265","modified":1554908056324},{"_id":"public/searchData.json","hash":"621d03e663efab5c334238c1e1805bacb73fb62f","modified":1554906924437},{"_id":"public/searchVersion.txt","hash":"af68b5dd721c57db858d4701f738ff76383e7605","modified":1554908056324},{"_id":"public/about/index.html","hash":"93b9e8c69ef5337d40832a95604bbaec53e82a0a","modified":1554906924438},{"_id":"public/2019/04/10/Mybatis的if-else/index.html","hash":"903b20a1c81fa7231299082a6094273eb723c782","modified":1554906924438},{"_id":"public/2019/04/09/SpringBoot的maven-git-commit-id-plugin使用/index.html","hash":"0c2872dc5088cd19a0f6f87c8c32226964f5bfe3","modified":1554906924439},{"_id":"public/2019/04/09/Java关于空指针的防范与思考/index.html","hash":"cf8ce174b42d6155733303be7df78e04710a5833","modified":1554906924439},{"_id":"public/2019/04/04/docker小白入门篇/index.html","hash":"e6c9f226806eeae35f9349e21b02fb9b00b984a8","modified":1554906924439},{"_id":"public/2019/04/03/Mysql的时间比较和DATE-FORMAT踩的坑/index.html","hash":"e788dc272b7fca0794e7584f695e75a9d5f81d57","modified":1554906924439},{"_id":"public/2019/04/01/MySQL语句中IN和EXISTS的区别和使用场景/index.html","hash":"1ff98600763f8c7791b34aed3753e892e38aff1e","modified":1554906924439},{"_id":"public/2019/03/18/Contos 环境 Docker安装echoip步骤/index.html","hash":"5d63ce3a4f461fe07b70401c0e0c5987b1bfbc0d","modified":1554906924439},{"_id":"public/2019/03/14/2019，重新开始/index.html","hash":"a834db64a0ed52da3f29b0c5264ea4280201a4ce","modified":1554906924439},{"_id":"public/archives/index.html","hash":"48f1a45a9443f6aba393d040c5f97d9be55a42ea","modified":1554906924439},{"_id":"public/archives/2019/index.html","hash":"b37e0a5d346e64e244a93a5529828335a7f1e2cc","modified":1554906924439},{"_id":"public/archives/2019/03/index.html","hash":"da008cab3c4e5d26532b6945c618c1b0753e1a65","modified":1554906924440},{"_id":"public/archives/2019/04/index.html","hash":"f8b1a9dafaabe308c8e7b2c7019e3f6c29359885","modified":1554906924441},{"_id":"public/index.html","hash":"cbf9f59b8da9c7646feab18bfc00e00e6e3b708a","modified":1554906924441},{"_id":"public/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1554906924466},{"_id":"public/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1554906924467},{"_id":"public/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1554906924469},{"_id":"public/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1554906924469},{"_id":"public/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1554906924469},{"_id":"public/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1554906924469},{"_id":"public/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1554906924469},{"_id":"public/fonts/lg.svg","hash":"50a2216596766a48655e3f87e1d1000ba93bf8a1","modified":1554906924469},{"_id":"public/css/highlight.css","hash":"f24dc40cd6ecab543623896df89399ae03bd344e","modified":1554906924471},{"_id":"public/css/markdown.css","hash":"6a21a90bec15f27d0b6110e22f0a05b533ceac5e","modified":1554906924472},{"_id":"public/css/style.css","hash":"541c2b69aa3188553b1cab7eb47eec83c87e6c8c","modified":1554906924472},{"_id":"public/js/lazyload.js","hash":"0b31dabace05042ee29f5989b0191e7e4072a88f","modified":1554906924473},{"_id":"public/js/local-search.js","hash":"652d22a71637c8e30cfa7356d5a8d5e402829421","modified":1554906924473},{"_id":"public/js/sw-test.js","hash":"d01a7f14328e73f3578240e2a391c209e275912b","modified":1554906924473},{"_id":"public/js/post.min.js","hash":"4b22673d9f88c7beaccd86485e6e75fe87d4ac1d","modified":1554906924473},{"_id":"public/js/mix/home-lazy-local.min.js","hash":"caa8f3748286b195621690690f8d0766c3fb7e4b","modified":1554906924474},{"_id":"public/js/post.js","hash":"19c7b84fc868688ffa117bdb30c7b28833e35232","modified":1554906924474},{"_id":"public/js/mix/home-lazy-local.js","hash":"2bc5cc6ccfb5486ad1bbf616071ca141e238411d","modified":1554906924474},{"_id":"public/js/mix/post-lazy-local.min.js","hash":"840ecd5212bf35f806fb6b7ec66e497f4aa309fb","modified":1554906924474},{"_id":"public/js/mix/post-lazy.js","hash":"a998a762da6a4f4d91bddd321f40303dc589636c","modified":1554906924474},{"_id":"public/js/mix/post-local.js","hash":"8fde069fcd701c517aba18a1f85f631bac0a7774","modified":1554906924474},{"_id":"public/js/mix/post-lazy.min.js","hash":"de1a54a6f8279b49b83ba3c3a85a1794986bca52","modified":1554906924474},{"_id":"public/js/mix/post-local.min.js","hash":"24d7ed166c7757cd6b12c3e2621f83d39eb4dd78","modified":1554906924474},{"_id":"public/css/lightgallery.min.css","hash":"9e76bdad163856774a96b1230a08dc506600a973","modified":1554906924480},{"_id":"public/js/mix/post-lazy-local.js","hash":"f40f01965bcbde9388ef70b072b3822b68a8c00a","modified":1554906924480},{"_id":"public/js/lightgallery.min.js","hash":"35bac37c2343c1946d1af64254ec1ab98bb2c247","modified":1554906924481},{"_id":"public/css/screen.css","hash":"b649355ef90fb185fcad37ea8fb3d57f3117c88f","modified":1554906924481},{"_id":"public/css/allinone.min.css","hash":"960be7d7a204c1d479db4c89f6e58b8ff5d03f60","modified":1554906924484}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2019-03-14T14:40:11.000Z","_content":"\n## 关于\n\n上班狗  萌新\n\n技术主栈：Java Web 开发\n\n日常大部分完成业务需求，没有什么特殊的地方\n\n也写过Android、写过Spark、用过Vue。。。。。搞的好杂\n\n性格呢，乐观派。\n\n<a href=\"https://github.com/zeyiY\" target=\"_blank\">GIthub</a>\n\n<a href=\"https://www.jianshu.com/u/d4d969e77023\" target=\"_blank\">简书</a>\n\n博客程序由 Hexo 提供支持，主题为开源的 [TryGhost/Casper](https://github.com/TryGhost/Casper)\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-03-14 22:40:11\n---\n\n## 关于\n\n上班狗  萌新\n\n技术主栈：Java Web 开发\n\n日常大部分完成业务需求，没有什么特殊的地方\n\n也写过Android、写过Spark、用过Vue。。。。。搞的好杂\n\n性格呢，乐观派。\n\n<a href=\"https://github.com/zeyiY\" target=\"_blank\">GIthub</a>\n\n<a href=\"https://www.jianshu.com/u/d4d969e77023\" target=\"_blank\">简书</a>\n\n博客程序由 Hexo 提供支持，主题为开源的 [TryGhost/Casper](https://github.com/TryGhost/Casper)\n\n","updated":"2019-03-14T14:57:40.034Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjubbfovo0000788aovsh6p7c","content":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>上班狗  萌新</p>\n<p>技术主栈：Java Web 开发</p>\n<p>日常大部分完成业务需求，没有什么特殊的地方</p>\n<p>也写过Android、写过Spark、用过Vue。。。。。搞的好杂</p>\n<p>性格呢，乐观派。</p>\n<p><a href=\"https://github.com/zeyiY\" target=\"_blank\">GIthub</a></p>\n<p><a href=\"https://www.jianshu.com/u/d4d969e77023\" target=\"_blank\">简书</a></p>\n<p>博客程序由 Hexo 提供支持，主题为开源的 <a href=\"https://github.com/TryGhost/Casper\" target=\"_blank\" rel=\"noopener\">TryGhost/Casper</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>上班狗  萌新</p>\n<p>技术主栈：Java Web 开发</p>\n<p>日常大部分完成业务需求，没有什么特殊的地方</p>\n<p>也写过Android、写过Spark、用过Vue。。。。。搞的好杂</p>\n<p>性格呢，乐观派。</p>\n<p><a href=\"https://github.com/zeyiY\" target=\"_blank\">GIthub</a></p>\n<p><a href=\"https://www.jianshu.com/u/d4d969e77023\" target=\"_blank\">简书</a></p>\n<p>博客程序由 Hexo 提供支持，主题为开源的 <a href=\"https://github.com/TryGhost/Casper\" target=\"_blank\" rel=\"noopener\">TryGhost/Casper</a></p>\n"}],"Post":[{"title":"2019，重新开始","date":"2019-03-14T14:15:50.000Z","_content":"\n##                                 2019，重新开始\n\n​    2019，北漂第四年，重新选择，重新开始。要做的事情很多，之前的想法要在这一年中一件一件的实现，首先就是创建一个自己的博客，虽然，有这个想法有好长时间，一直没有落地，终于在昨天把博客搭建起来了，算一个开始。","source":"_posts/2019，重新开始.md","raw":"---\ntitle: 2019，重新开始\ndate: 2019-03-14 22:15:50\ntags:\n---\n\n##                                 2019，重新开始\n\n​    2019，北漂第四年，重新选择，重新开始。要做的事情很多，之前的想法要在这一年中一件一件的实现，首先就是创建一个自己的博客，虽然，有这个想法有好长时间，一直没有落地，终于在昨天把博客搭建起来了，算一个开始。","slug":"2019，重新开始","published":1,"updated":"2019-03-14T14:21:34.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjubbfovq0001788aj2yogwad","content":"<h2 id=\"2019，重新开始\"><a href=\"#2019，重新开始\" class=\"headerlink\" title=\"2019，重新开始\"></a>2019，重新开始</h2><p>​    2019，北漂第四年，重新选择，重新开始。要做的事情很多，之前的想法要在这一年中一件一件的实现，首先就是创建一个自己的博客，虽然，有这个想法有好长时间，一直没有落地，终于在昨天把博客搭建起来了，算一个开始。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2019，重新开始\"><a href=\"#2019，重新开始\" class=\"headerlink\" title=\"2019，重新开始\"></a>2019，重新开始</h2><p>​    2019，北漂第四年，重新选择，重新开始。要做的事情很多，之前的想法要在这一年中一件一件的实现，首先就是创建一个自己的博客，虽然，有这个想法有好长时间，一直没有落地，终于在昨天把博客搭建起来了，算一个开始。</p>\n"},{"title":"MySQL语句中IN和EXISTS的区别和使用场景","date":"2019-04-01T15:40:41.000Z","_content":"## MySQL SQL语句中IN 和 EXISTS的区别和使用场景\n\n转载：https://blog.csdn.net/wqc19920906/article/details/79800374\n\n### IN 语句：只执行一次\n\n确定给定的值是否与子查询或列表中的值相匹配。\n\nin在查询的时候，首先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选。所以相对内表比较小的时候，in的速度较快。\n\n### EXISTS语句：执行外表结果.length次\n\n指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的。匹配上就将结果放入结果集中。\n\n使用exists关键字进行查询的时候，首先，我们先查询的不是子查询的内容，而是查我们的主查询的表。\n\n然后，根据表的每一条记录，执行以下语句，依次去判断where后面的条件是否成立。\n\n如果成立则返回true不成立则返回false。如果返回的是true的话，则该行结果保留，如果返回的是false的话，则删除该行，最后将得到的结果返回。\n\n### 区别及应用场景\n\nin 和 exists的区别: \n\n1. 如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in。\n2.  反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。\n3. 其实我们区分in和exists主要是造成了驱动顺序的改变(这是性能变化的关键)，如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询，所以我们会以驱动表的快速返回为目标，那么就会考虑到索引及结果集的关系了 。\n4. IN时不对NULL进行处理。\n5. in 是把外表和内表作hash 连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询。\n6. 一直以来认为exists比in效率高的说法是不准确的。\n\n### not in 和not exists\n\n​    如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。\n\n### 场景示例\n\n1. IN 查询示例\n\n```\nselect * from A\nwhere id in(select id from B)\n```\n\n查询过程类似于以下过程\n\n```\nList resultSet=[];\nArray A=(select * from A);\nArray B=(select id from B);\n\nfor(int i=0;i<A.length;i++) {\n   for(int j=0;j<B.length;j++) {\n      if(A[i].id==B[j].id) {\n         resultSet.add(A[i]);\n         break;\n      }\n   }\n}\nreturn resultSet;\n```\n\n2. exists 查询示例\n\n```\nselect a.* from A a \nwhere exists(select 1 from B b where a.id=b.id)\n```\n\n查询过程类似于以下过程\n\n```\nList resultSet=[];\nArray A=(select * from A)\n\nfor(int i=0;i<A.length;i++) {\n   if(exists(A[i].id) {    //执行select 1 from B b where b.id=a.id是否有记录返回\n       resultSet.add(A[i]);\n   }\n}\nreturn resultSet;\n```\n\n3. exists 在子查询中使用 NULL 仍然返回结果集\n\nselect * from TableIn where exists(select null)\n等同于： select * from TableIn\n\n4. \n\n```\nusers表有1000条记录，id自增，id都大于0\n\nselect * from users where exists (select * from users limit 0); --输出1000条记录\n\nselect * from users where exists (select * from users where id < 0); --输出0条记录\n```\n\nexists查询的本质，只要碰到有记录，则返回true；所以limit根本就不会去管，或者说执行不到。\n\n5. exists不可以完全代替in\n\n```\n--没有关联字段的情况：枚举常量\nselect * from areas where id in (4, 5, 6);\n\n--没有关联字段的情况：这样exists对子查询，要么全true，要么全false\nselect * from areas where id in (select city_id from deals where deals.name = 'xxx'); \n```\n\n6. exists 优化\n\n在许多基于基础表的查询中，为了满足一个条件，往往需要对另一个表进行联接。 \n在这种情况下，使用exists(或not exists)通常将提高查询的效率。\n\n```\n（低效） \nselect ... from table1 t1 where t1.id > 10 and pno in (select no from table2 where name like 'www%'); \n（高效） \nselect ... from table1 t1 where t1.id > 10 and exists (select 1 from table2 t2 where t1.pno = t2.no and name like 'www%'); \n```\n\n7. 用not exists替代not in\n\n在子查询中，not in子句将执行一个内部的排序和合并。 \n无论在哪种情况下，not in都是最低效的 (因为它对子查询中的表执行了一个全表遍历)。 \n为了避免使用not in，我们可以把它改写成外连接(Outer Joins)或not exists。 \n\n8. 用exists替换distinct\n\n当提交一个包含一对多表信息的查询时,避免在select子句中使用distinct. 一般可以考虑用exists替换 \n\nexists使查询更为迅速,因为RDBMS核心模块将在子查询的条件一旦满足后,立刻返回结果.\n\n```\n（低效） \nselect distinct d.dept_no, d.dept_name from t_dept d, t_emp e where d.dept_no = e.dept_no; \n（高效） \nselect d.dept_no, d.dept_name from t_dept d where exists (select 1 from t_emp where d.dept_no = e.dept_no); \n```\n\n9. 用表连接替换exists\n\n```\n（低效） \nselect ename from emp e where exists (select 1 from dept where dept_no = e.dept_no and dept_cat = 'W'); \nSELECT ENAME \n（高效） \nselect ename from dept d, emp e where e.dept_no = d.dept_no and dept_cat = 'W'; \n```\n\n","source":"_posts/MySQL语句中IN和EXISTS的区别和使用场景.md","raw":"---\ntitle: MySQL语句中IN和EXISTS的区别和使用场景\ndate: 2019-04-01 23:40:41\ntags:\n---\n## MySQL SQL语句中IN 和 EXISTS的区别和使用场景\n\n转载：https://blog.csdn.net/wqc19920906/article/details/79800374\n\n### IN 语句：只执行一次\n\n确定给定的值是否与子查询或列表中的值相匹配。\n\nin在查询的时候，首先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选。所以相对内表比较小的时候，in的速度较快。\n\n### EXISTS语句：执行外表结果.length次\n\n指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的。匹配上就将结果放入结果集中。\n\n使用exists关键字进行查询的时候，首先，我们先查询的不是子查询的内容，而是查我们的主查询的表。\n\n然后，根据表的每一条记录，执行以下语句，依次去判断where后面的条件是否成立。\n\n如果成立则返回true不成立则返回false。如果返回的是true的话，则该行结果保留，如果返回的是false的话，则删除该行，最后将得到的结果返回。\n\n### 区别及应用场景\n\nin 和 exists的区别: \n\n1. 如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in。\n2.  反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。\n3. 其实我们区分in和exists主要是造成了驱动顺序的改变(这是性能变化的关键)，如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询，所以我们会以驱动表的快速返回为目标，那么就会考虑到索引及结果集的关系了 。\n4. IN时不对NULL进行处理。\n5. in 是把外表和内表作hash 连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询。\n6. 一直以来认为exists比in效率高的说法是不准确的。\n\n### not in 和not exists\n\n​    如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。\n\n### 场景示例\n\n1. IN 查询示例\n\n```\nselect * from A\nwhere id in(select id from B)\n```\n\n查询过程类似于以下过程\n\n```\nList resultSet=[];\nArray A=(select * from A);\nArray B=(select id from B);\n\nfor(int i=0;i<A.length;i++) {\n   for(int j=0;j<B.length;j++) {\n      if(A[i].id==B[j].id) {\n         resultSet.add(A[i]);\n         break;\n      }\n   }\n}\nreturn resultSet;\n```\n\n2. exists 查询示例\n\n```\nselect a.* from A a \nwhere exists(select 1 from B b where a.id=b.id)\n```\n\n查询过程类似于以下过程\n\n```\nList resultSet=[];\nArray A=(select * from A)\n\nfor(int i=0;i<A.length;i++) {\n   if(exists(A[i].id) {    //执行select 1 from B b where b.id=a.id是否有记录返回\n       resultSet.add(A[i]);\n   }\n}\nreturn resultSet;\n```\n\n3. exists 在子查询中使用 NULL 仍然返回结果集\n\nselect * from TableIn where exists(select null)\n等同于： select * from TableIn\n\n4. \n\n```\nusers表有1000条记录，id自增，id都大于0\n\nselect * from users where exists (select * from users limit 0); --输出1000条记录\n\nselect * from users where exists (select * from users where id < 0); --输出0条记录\n```\n\nexists查询的本质，只要碰到有记录，则返回true；所以limit根本就不会去管，或者说执行不到。\n\n5. exists不可以完全代替in\n\n```\n--没有关联字段的情况：枚举常量\nselect * from areas where id in (4, 5, 6);\n\n--没有关联字段的情况：这样exists对子查询，要么全true，要么全false\nselect * from areas where id in (select city_id from deals where deals.name = 'xxx'); \n```\n\n6. exists 优化\n\n在许多基于基础表的查询中，为了满足一个条件，往往需要对另一个表进行联接。 \n在这种情况下，使用exists(或not exists)通常将提高查询的效率。\n\n```\n（低效） \nselect ... from table1 t1 where t1.id > 10 and pno in (select no from table2 where name like 'www%'); \n（高效） \nselect ... from table1 t1 where t1.id > 10 and exists (select 1 from table2 t2 where t1.pno = t2.no and name like 'www%'); \n```\n\n7. 用not exists替代not in\n\n在子查询中，not in子句将执行一个内部的排序和合并。 \n无论在哪种情况下，not in都是最低效的 (因为它对子查询中的表执行了一个全表遍历)。 \n为了避免使用not in，我们可以把它改写成外连接(Outer Joins)或not exists。 \n\n8. 用exists替换distinct\n\n当提交一个包含一对多表信息的查询时,避免在select子句中使用distinct. 一般可以考虑用exists替换 \n\nexists使查询更为迅速,因为RDBMS核心模块将在子查询的条件一旦满足后,立刻返回结果.\n\n```\n（低效） \nselect distinct d.dept_no, d.dept_name from t_dept d, t_emp e where d.dept_no = e.dept_no; \n（高效） \nselect d.dept_no, d.dept_name from t_dept d where exists (select 1 from t_emp where d.dept_no = e.dept_no); \n```\n\n9. 用表连接替换exists\n\n```\n（低效） \nselect ename from emp e where exists (select 1 from dept where dept_no = e.dept_no and dept_cat = 'W'); \nSELECT ENAME \n（高效） \nselect ename from dept d, emp e where e.dept_no = d.dept_no and dept_cat = 'W'; \n```\n\n","slug":"MySQL语句中IN和EXISTS的区别和使用场景","published":1,"updated":"2019-04-02T15:11:54.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjubbfovu0002788aw89w2x1e","content":"<h2 id=\"MySQL-SQL语句中IN-和-EXISTS的区别和使用场景\"><a href=\"#MySQL-SQL语句中IN-和-EXISTS的区别和使用场景\" class=\"headerlink\" title=\"MySQL SQL语句中IN 和 EXISTS的区别和使用场景\"></a>MySQL SQL语句中IN 和 EXISTS的区别和使用场景</h2><p>转载：<a href=\"https://blog.csdn.net/wqc19920906/article/details/79800374\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wqc19920906/article/details/79800374</a></p>\n<h3 id=\"IN-语句：只执行一次\"><a href=\"#IN-语句：只执行一次\" class=\"headerlink\" title=\"IN 语句：只执行一次\"></a>IN 语句：只执行一次</h3><p>确定给定的值是否与子查询或列表中的值相匹配。</p>\n<p>in在查询的时候，首先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选。所以相对内表比较小的时候，in的速度较快。</p>\n<h3 id=\"EXISTS语句：执行外表结果-length次\"><a href=\"#EXISTS语句：执行外表结果-length次\" class=\"headerlink\" title=\"EXISTS语句：执行外表结果.length次\"></a>EXISTS语句：执行外表结果.length次</h3><p>指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的。匹配上就将结果放入结果集中。</p>\n<p>使用exists关键字进行查询的时候，首先，我们先查询的不是子查询的内容，而是查我们的主查询的表。</p>\n<p>然后，根据表的每一条记录，执行以下语句，依次去判断where后面的条件是否成立。</p>\n<p>如果成立则返回true不成立则返回false。如果返回的是true的话，则该行结果保留，如果返回的是false的话，则删除该行，最后将得到的结果返回。</p>\n<h3 id=\"区别及应用场景\"><a href=\"#区别及应用场景\" class=\"headerlink\" title=\"区别及应用场景\"></a>区别及应用场景</h3><p>in 和 exists的区别: </p>\n<ol>\n<li>如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in。</li>\n<li>反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。</li>\n<li>其实我们区分in和exists主要是造成了驱动顺序的改变(这是性能变化的关键)，如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询，所以我们会以驱动表的快速返回为目标，那么就会考虑到索引及结果集的关系了 。</li>\n<li>IN时不对NULL进行处理。</li>\n<li>in 是把外表和内表作hash 连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询。</li>\n<li>一直以来认为exists比in效率高的说法是不准确的。</li>\n</ol>\n<h3 id=\"not-in-和not-exists\"><a href=\"#not-in-和not-exists\" class=\"headerlink\" title=\"not in 和not exists\"></a>not in 和not exists</h3><p>​    如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。</p>\n<h3 id=\"场景示例\"><a href=\"#场景示例\" class=\"headerlink\" title=\"场景示例\"></a>场景示例</h3><ol>\n<li>IN 查询示例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from A</span><br><span class=\"line\">where id in(select id from B)</span><br></pre></td></tr></table></figure>\n<p>查询过程类似于以下过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List resultSet=[];</span><br><span class=\"line\">Array A=(select * from A);</span><br><span class=\"line\">Array B=(select id from B);</span><br><span class=\"line\"></span><br><span class=\"line\">for(int i=0;i&lt;A.length;i++) &#123;</span><br><span class=\"line\">   for(int j=0;j&lt;B.length;j++) &#123;</span><br><span class=\"line\">      if(A[i].id==B[j].id) &#123;</span><br><span class=\"line\">         resultSet.add(A[i]);</span><br><span class=\"line\">         break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return resultSet;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>exists 查询示例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select a.* from A a </span><br><span class=\"line\">where exists(select 1 from B b where a.id=b.id)</span><br></pre></td></tr></table></figure>\n<p>查询过程类似于以下过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List resultSet=[];</span><br><span class=\"line\">Array A=(select * from A)</span><br><span class=\"line\"></span><br><span class=\"line\">for(int i=0;i&lt;A.length;i++) &#123;</span><br><span class=\"line\">   if(exists(A[i].id) &#123;    //执行select 1 from B b where b.id=a.id是否有记录返回</span><br><span class=\"line\">       resultSet.add(A[i]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return resultSet;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>exists 在子查询中使用 NULL 仍然返回结果集</li>\n</ol>\n<p>select <em> from TableIn where exists(select null)<br>等同于： select </em> from TableIn</p>\n<ol start=\"4\">\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users表有1000条记录，id自增，id都大于0</span><br><span class=\"line\"></span><br><span class=\"line\">select * from users where exists (select * from users limit 0); --输出1000条记录</span><br><span class=\"line\"></span><br><span class=\"line\">select * from users where exists (select * from users where id &lt; 0); --输出0条记录</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>exists查询的本质，只要碰到有记录，则返回true；所以limit根本就不会去管，或者说执行不到。</p>\n<ol start=\"5\">\n<li>exists不可以完全代替in</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--没有关联字段的情况：枚举常量</span><br><span class=\"line\">select * from areas where id in (4, 5, 6);</span><br><span class=\"line\"></span><br><span class=\"line\">--没有关联字段的情况：这样exists对子查询，要么全true，要么全false</span><br><span class=\"line\">select * from areas where id in (select city_id from deals where deals.name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>exists 优化</li>\n</ol>\n<p>在许多基于基础表的查询中，为了满足一个条件，往往需要对另一个表进行联接。<br>在这种情况下，使用exists(或not exists)通常将提高查询的效率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（低效） </span><br><span class=\"line\">select ... from table1 t1 where t1.id &gt; 10 and pno in (select no from table2 where name like &apos;www%&apos;); </span><br><span class=\"line\">（高效） </span><br><span class=\"line\">select ... from table1 t1 where t1.id &gt; 10 and exists (select 1 from table2 t2 where t1.pno = t2.no and name like &apos;www%&apos;);</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>用not exists替代not in</li>\n</ol>\n<p>在子查询中，not in子句将执行一个内部的排序和合并。<br>无论在哪种情况下，not in都是最低效的 (因为它对子查询中的表执行了一个全表遍历)。<br>为了避免使用not in，我们可以把它改写成外连接(Outer Joins)或not exists。 </p>\n<ol start=\"8\">\n<li>用exists替换distinct</li>\n</ol>\n<p>当提交一个包含一对多表信息的查询时,避免在select子句中使用distinct. 一般可以考虑用exists替换 </p>\n<p>exists使查询更为迅速,因为RDBMS核心模块将在子查询的条件一旦满足后,立刻返回结果.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（低效） </span><br><span class=\"line\">select distinct d.dept_no, d.dept_name from t_dept d, t_emp e where d.dept_no = e.dept_no; </span><br><span class=\"line\">（高效） </span><br><span class=\"line\">select d.dept_no, d.dept_name from t_dept d where exists (select 1 from t_emp where d.dept_no = e.dept_no);</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>用表连接替换exists</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（低效） </span><br><span class=\"line\">select ename from emp e where exists (select 1 from dept where dept_no = e.dept_no and dept_cat = &apos;W&apos;); </span><br><span class=\"line\">SELECT ENAME </span><br><span class=\"line\">（高效） </span><br><span class=\"line\">select ename from dept d, emp e where e.dept_no = d.dept_no and dept_cat = &apos;W&apos;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MySQL-SQL语句中IN-和-EXISTS的区别和使用场景\"><a href=\"#MySQL-SQL语句中IN-和-EXISTS的区别和使用场景\" class=\"headerlink\" title=\"MySQL SQL语句中IN 和 EXISTS的区别和使用场景\"></a>MySQL SQL语句中IN 和 EXISTS的区别和使用场景</h2><p>转载：<a href=\"https://blog.csdn.net/wqc19920906/article/details/79800374\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wqc19920906/article/details/79800374</a></p>\n<h3 id=\"IN-语句：只执行一次\"><a href=\"#IN-语句：只执行一次\" class=\"headerlink\" title=\"IN 语句：只执行一次\"></a>IN 语句：只执行一次</h3><p>确定给定的值是否与子查询或列表中的值相匹配。</p>\n<p>in在查询的时候，首先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选。所以相对内表比较小的时候，in的速度较快。</p>\n<h3 id=\"EXISTS语句：执行外表结果-length次\"><a href=\"#EXISTS语句：执行外表结果-length次\" class=\"headerlink\" title=\"EXISTS语句：执行外表结果.length次\"></a>EXISTS语句：执行外表结果.length次</h3><p>指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的。匹配上就将结果放入结果集中。</p>\n<p>使用exists关键字进行查询的时候，首先，我们先查询的不是子查询的内容，而是查我们的主查询的表。</p>\n<p>然后，根据表的每一条记录，执行以下语句，依次去判断where后面的条件是否成立。</p>\n<p>如果成立则返回true不成立则返回false。如果返回的是true的话，则该行结果保留，如果返回的是false的话，则删除该行，最后将得到的结果返回。</p>\n<h3 id=\"区别及应用场景\"><a href=\"#区别及应用场景\" class=\"headerlink\" title=\"区别及应用场景\"></a>区别及应用场景</h3><p>in 和 exists的区别: </p>\n<ol>\n<li>如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in。</li>\n<li>反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。</li>\n<li>其实我们区分in和exists主要是造成了驱动顺序的改变(这是性能变化的关键)，如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询，所以我们会以驱动表的快速返回为目标，那么就会考虑到索引及结果集的关系了 。</li>\n<li>IN时不对NULL进行处理。</li>\n<li>in 是把外表和内表作hash 连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询。</li>\n<li>一直以来认为exists比in效率高的说法是不准确的。</li>\n</ol>\n<h3 id=\"not-in-和not-exists\"><a href=\"#not-in-和not-exists\" class=\"headerlink\" title=\"not in 和not exists\"></a>not in 和not exists</h3><p>​    如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。</p>\n<h3 id=\"场景示例\"><a href=\"#场景示例\" class=\"headerlink\" title=\"场景示例\"></a>场景示例</h3><ol>\n<li>IN 查询示例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from A</span><br><span class=\"line\">where id in(select id from B)</span><br></pre></td></tr></table></figure>\n<p>查询过程类似于以下过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List resultSet=[];</span><br><span class=\"line\">Array A=(select * from A);</span><br><span class=\"line\">Array B=(select id from B);</span><br><span class=\"line\"></span><br><span class=\"line\">for(int i=0;i&lt;A.length;i++) &#123;</span><br><span class=\"line\">   for(int j=0;j&lt;B.length;j++) &#123;</span><br><span class=\"line\">      if(A[i].id==B[j].id) &#123;</span><br><span class=\"line\">         resultSet.add(A[i]);</span><br><span class=\"line\">         break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return resultSet;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>exists 查询示例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select a.* from A a </span><br><span class=\"line\">where exists(select 1 from B b where a.id=b.id)</span><br></pre></td></tr></table></figure>\n<p>查询过程类似于以下过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List resultSet=[];</span><br><span class=\"line\">Array A=(select * from A)</span><br><span class=\"line\"></span><br><span class=\"line\">for(int i=0;i&lt;A.length;i++) &#123;</span><br><span class=\"line\">   if(exists(A[i].id) &#123;    //执行select 1 from B b where b.id=a.id是否有记录返回</span><br><span class=\"line\">       resultSet.add(A[i]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return resultSet;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>exists 在子查询中使用 NULL 仍然返回结果集</li>\n</ol>\n<p>select <em> from TableIn where exists(select null)<br>等同于： select </em> from TableIn</p>\n<ol start=\"4\">\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users表有1000条记录，id自增，id都大于0</span><br><span class=\"line\"></span><br><span class=\"line\">select * from users where exists (select * from users limit 0); --输出1000条记录</span><br><span class=\"line\"></span><br><span class=\"line\">select * from users where exists (select * from users where id &lt; 0); --输出0条记录</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>exists查询的本质，只要碰到有记录，则返回true；所以limit根本就不会去管，或者说执行不到。</p>\n<ol start=\"5\">\n<li>exists不可以完全代替in</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--没有关联字段的情况：枚举常量</span><br><span class=\"line\">select * from areas where id in (4, 5, 6);</span><br><span class=\"line\"></span><br><span class=\"line\">--没有关联字段的情况：这样exists对子查询，要么全true，要么全false</span><br><span class=\"line\">select * from areas where id in (select city_id from deals where deals.name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>exists 优化</li>\n</ol>\n<p>在许多基于基础表的查询中，为了满足一个条件，往往需要对另一个表进行联接。<br>在这种情况下，使用exists(或not exists)通常将提高查询的效率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（低效） </span><br><span class=\"line\">select ... from table1 t1 where t1.id &gt; 10 and pno in (select no from table2 where name like &apos;www%&apos;); </span><br><span class=\"line\">（高效） </span><br><span class=\"line\">select ... from table1 t1 where t1.id &gt; 10 and exists (select 1 from table2 t2 where t1.pno = t2.no and name like &apos;www%&apos;);</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>用not exists替代not in</li>\n</ol>\n<p>在子查询中，not in子句将执行一个内部的排序和合并。<br>无论在哪种情况下，not in都是最低效的 (因为它对子查询中的表执行了一个全表遍历)。<br>为了避免使用not in，我们可以把它改写成外连接(Outer Joins)或not exists。 </p>\n<ol start=\"8\">\n<li>用exists替换distinct</li>\n</ol>\n<p>当提交一个包含一对多表信息的查询时,避免在select子句中使用distinct. 一般可以考虑用exists替换 </p>\n<p>exists使查询更为迅速,因为RDBMS核心模块将在子查询的条件一旦满足后,立刻返回结果.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（低效） </span><br><span class=\"line\">select distinct d.dept_no, d.dept_name from t_dept d, t_emp e where d.dept_no = e.dept_no; </span><br><span class=\"line\">（高效） </span><br><span class=\"line\">select d.dept_no, d.dept_name from t_dept d where exists (select 1 from t_emp where d.dept_no = e.dept_no);</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>用表连接替换exists</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（低效） </span><br><span class=\"line\">select ename from emp e where exists (select 1 from dept where dept_no = e.dept_no and dept_cat = &apos;W&apos;); </span><br><span class=\"line\">SELECT ENAME </span><br><span class=\"line\">（高效） </span><br><span class=\"line\">select ename from dept d, emp e where e.dept_no = d.dept_no and dept_cat = &apos;W&apos;;</span><br></pre></td></tr></table></figure>\n"},{"layout":"contos","title":"echoip步骤","date":"2019-03-18T15:21:02.000Z","_content":"\n## Contos 环境 Docker安装 **echoip**步骤\n\n背景：因为最近的一些个人的想法，恰好需要使用根据Ip获取地理位置，在百度和Google中查询了很多种接口，要么收费，要么有次数限制，萌新囊中羞涩，故而使用https://github.com/mpolden/echoip 这个服务了，并且使用了Docker 部署的方式进行使用。在部署过程中踩了很多坑，故进而记录，以防以后使用。\n\n### 环境准备\n\n#### 首先要安装docker环境，并运行起来。\n\n```\nuname -r\n```\n\nDocker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。\n\n安装一些必要的系统工具\n\n```\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n添加软件源信息：\n\n```\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n更新 yum 缓存：\n\n```\nsudo yum makecache fast\n```\n\n安装 Docker-ce：\n\n```\nsudo yum -y install docker-ce\n```\n\n启动 Docker 后台服务\n\n```\nsudo systemctl start docker\n```\n\n测试运行 hello-world\n\n```\ndocker run hello-world\n```\n\n#### 安装git\n\n```\nsudo yum install git\n```\n\n安装Vim\n\n```\nsudo yum install vim\n```\n\n\n\n### Install docker-ce\n\nClone the project\n\n```\ngit clone https://github.com/alaluces/Docker-EchoIP.git echoip\ncd echoip\n```\n\nDownload the geoip db and extract to geoip folder\n\n```\ncd geoip\nwget https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz\nwget https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz\ntar xvf GeoLite2-City.tar.gz\ntar xvf GeoLite2-Country.tar.gz\nmv GeoLite2-City_20190318/GeoLite2-City.mmdb ..\nmv GeoLite2-Country_20190318/GeoLite2-Country.mmdb ..\n\n```\n\nEdit the startup script to modify your preferences\n\n```\nvim start.sh\n\nApplication Options:\n  -f, --country-db=FILE        Path to GeoIP country database\n  -c, --city-db=FILE           Path to GeoIP city database\n  -l, --listen=ADDR            Listening address (default: :8080)\n  -r, --reverse-lookup         Perform reverse hostname lookups\n  -p, --port-lookup            Enable port lookup\n  -t, --template=FILE          Path to template (default: index.html)\n  -H, --trusted-header=NAME    Header to trust for remote IP, if present (e.g. X-Real-IP)\n\nHelp Options:\n  -h, --help                   Show this help message\n```\n\nBuild the container\n\n```\ndocker build -t echoip .\n```\n\nRun the image you built\n\n```\ndocker run -d --rm --name echoip -p8080:8080 echoip\n```\n\nIf built successfully, it can be viewed on:\n\n```\nhttp://ip:8080/json\n```\n\n![gratisography-ski-lift-summer.jpg](https://i.loli.net/2019/03/18/5c8fb80fb113e.jpg)","source":"_posts/Contos 环境 Docker安装echoip步骤.md","raw":"---\nlayout: contos\ntitle: echoip步骤\ndate: 2019-03-18 23:21:02\ntags:\n---\n\n## Contos 环境 Docker安装 **echoip**步骤\n\n背景：因为最近的一些个人的想法，恰好需要使用根据Ip获取地理位置，在百度和Google中查询了很多种接口，要么收费，要么有次数限制，萌新囊中羞涩，故而使用https://github.com/mpolden/echoip 这个服务了，并且使用了Docker 部署的方式进行使用。在部署过程中踩了很多坑，故进而记录，以防以后使用。\n\n### 环境准备\n\n#### 首先要安装docker环境，并运行起来。\n\n```\nuname -r\n```\n\nDocker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。\n\n安装一些必要的系统工具\n\n```\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n添加软件源信息：\n\n```\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n更新 yum 缓存：\n\n```\nsudo yum makecache fast\n```\n\n安装 Docker-ce：\n\n```\nsudo yum -y install docker-ce\n```\n\n启动 Docker 后台服务\n\n```\nsudo systemctl start docker\n```\n\n测试运行 hello-world\n\n```\ndocker run hello-world\n```\n\n#### 安装git\n\n```\nsudo yum install git\n```\n\n安装Vim\n\n```\nsudo yum install vim\n```\n\n\n\n### Install docker-ce\n\nClone the project\n\n```\ngit clone https://github.com/alaluces/Docker-EchoIP.git echoip\ncd echoip\n```\n\nDownload the geoip db and extract to geoip folder\n\n```\ncd geoip\nwget https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz\nwget https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz\ntar xvf GeoLite2-City.tar.gz\ntar xvf GeoLite2-Country.tar.gz\nmv GeoLite2-City_20190318/GeoLite2-City.mmdb ..\nmv GeoLite2-Country_20190318/GeoLite2-Country.mmdb ..\n\n```\n\nEdit the startup script to modify your preferences\n\n```\nvim start.sh\n\nApplication Options:\n  -f, --country-db=FILE        Path to GeoIP country database\n  -c, --city-db=FILE           Path to GeoIP city database\n  -l, --listen=ADDR            Listening address (default: :8080)\n  -r, --reverse-lookup         Perform reverse hostname lookups\n  -p, --port-lookup            Enable port lookup\n  -t, --template=FILE          Path to template (default: index.html)\n  -H, --trusted-header=NAME    Header to trust for remote IP, if present (e.g. X-Real-IP)\n\nHelp Options:\n  -h, --help                   Show this help message\n```\n\nBuild the container\n\n```\ndocker build -t echoip .\n```\n\nRun the image you built\n\n```\ndocker run -d --rm --name echoip -p8080:8080 echoip\n```\n\nIf built successfully, it can be viewed on:\n\n```\nhttp://ip:8080/json\n```\n\n![gratisography-ski-lift-summer.jpg](https://i.loli.net/2019/03/18/5c8fb80fb113e.jpg)","slug":"Contos 环境 Docker安装echoip步骤","published":1,"updated":"2019-04-01T15:36:29.631Z","comments":1,"photos":[],"link":"","_id":"cjubbfovw0003788alghncswx","content":"<h2 id=\"Contos-环境-Docker安装-echoip步骤\"><a href=\"#Contos-环境-Docker安装-echoip步骤\" class=\"headerlink\" title=\"Contos 环境 Docker安装 echoip步骤\"></a>Contos 环境 Docker安装 <strong>echoip</strong>步骤</h2><p>背景：因为最近的一些个人的想法，恰好需要使用根据Ip获取地理位置，在百度和Google中查询了很多种接口，要么收费，要么有次数限制，萌新囊中羞涩，故而使用<a href=\"https://github.com/mpolden/echoip\" target=\"_blank\" rel=\"noopener\">https://github.com/mpolden/echoip</a> 这个服务了，并且使用了Docker 部署的方式进行使用。在部署过程中踩了很多坑，故进而记录，以防以后使用。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h4 id=\"首先要安装docker环境，并运行起来。\"><a href=\"#首先要安装docker环境，并运行起来。\" class=\"headerlink\" title=\"首先要安装docker环境，并运行起来。\"></a>首先要安装docker环境，并运行起来。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br></pre></td></tr></table></figure>\n<p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p>\n<p>安装一些必要的系统工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n<p>添加软件源信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<p>更新 yum 缓存：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum makecache fast</span><br></pre></td></tr></table></figure>\n<p>安装 Docker-ce：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure>\n<p>启动 Docker 后台服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n<p>测试运行 hello-world</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install git</span><br></pre></td></tr></table></figure>\n<p>安装Vim</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install vim</span><br></pre></td></tr></table></figure>\n<h3 id=\"Install-docker-ce\"><a href=\"#Install-docker-ce\" class=\"headerlink\" title=\"Install docker-ce\"></a>Install docker-ce</h3><p>Clone the project</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/alaluces/Docker-EchoIP.git echoip</span><br><span class=\"line\">cd echoip</span><br></pre></td></tr></table></figure>\n<p>Download the geoip db and extract to geoip folder</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd geoip</span><br><span class=\"line\">wget https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz</span><br><span class=\"line\">wget https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz</span><br><span class=\"line\">tar xvf GeoLite2-City.tar.gz</span><br><span class=\"line\">tar xvf GeoLite2-Country.tar.gz</span><br><span class=\"line\">mv GeoLite2-City_20190318/GeoLite2-City.mmdb ..</span><br><span class=\"line\">mv GeoLite2-Country_20190318/GeoLite2-Country.mmdb ..</span><br></pre></td></tr></table></figure>\n<p>Edit the startup script to modify your preferences</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim start.sh</span><br><span class=\"line\"></span><br><span class=\"line\">Application Options:</span><br><span class=\"line\">  -f, --country-db=FILE        Path to GeoIP country database</span><br><span class=\"line\">  -c, --city-db=FILE           Path to GeoIP city database</span><br><span class=\"line\">  -l, --listen=ADDR            Listening address (default: :8080)</span><br><span class=\"line\">  -r, --reverse-lookup         Perform reverse hostname lookups</span><br><span class=\"line\">  -p, --port-lookup            Enable port lookup</span><br><span class=\"line\">  -t, --template=FILE          Path to template (default: index.html)</span><br><span class=\"line\">  -H, --trusted-header=NAME    Header to trust for remote IP, if present (e.g. X-Real-IP)</span><br><span class=\"line\"></span><br><span class=\"line\">Help Options:</span><br><span class=\"line\">  -h, --help                   Show this help message</span><br></pre></td></tr></table></figure>\n<p>Build the container</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t echoip .</span><br></pre></td></tr></table></figure>\n<p>Run the image you built</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --rm --name echoip -p8080:8080 echoip</span><br></pre></td></tr></table></figure>\n<p>If built successfully, it can be viewed on:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://ip:8080/json</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/03/18/5c8fb80fb113e.jpg\" alt=\"gratisography-ski-lift-summer.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Contos-环境-Docker安装-echoip步骤\"><a href=\"#Contos-环境-Docker安装-echoip步骤\" class=\"headerlink\" title=\"Contos 环境 Docker安装 echoip步骤\"></a>Contos 环境 Docker安装 <strong>echoip</strong>步骤</h2><p>背景：因为最近的一些个人的想法，恰好需要使用根据Ip获取地理位置，在百度和Google中查询了很多种接口，要么收费，要么有次数限制，萌新囊中羞涩，故而使用<a href=\"https://github.com/mpolden/echoip\" target=\"_blank\" rel=\"noopener\">https://github.com/mpolden/echoip</a> 这个服务了，并且使用了Docker 部署的方式进行使用。在部署过程中踩了很多坑，故进而记录，以防以后使用。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h4 id=\"首先要安装docker环境，并运行起来。\"><a href=\"#首先要安装docker环境，并运行起来。\" class=\"headerlink\" title=\"首先要安装docker环境，并运行起来。\"></a>首先要安装docker环境，并运行起来。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br></pre></td></tr></table></figure>\n<p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p>\n<p>安装一些必要的系统工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n<p>添加软件源信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<p>更新 yum 缓存：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum makecache fast</span><br></pre></td></tr></table></figure>\n<p>安装 Docker-ce：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure>\n<p>启动 Docker 后台服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n<p>测试运行 hello-world</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install git</span><br></pre></td></tr></table></figure>\n<p>安装Vim</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install vim</span><br></pre></td></tr></table></figure>\n<h3 id=\"Install-docker-ce\"><a href=\"#Install-docker-ce\" class=\"headerlink\" title=\"Install docker-ce\"></a>Install docker-ce</h3><p>Clone the project</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/alaluces/Docker-EchoIP.git echoip</span><br><span class=\"line\">cd echoip</span><br></pre></td></tr></table></figure>\n<p>Download the geoip db and extract to geoip folder</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd geoip</span><br><span class=\"line\">wget https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz</span><br><span class=\"line\">wget https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz</span><br><span class=\"line\">tar xvf GeoLite2-City.tar.gz</span><br><span class=\"line\">tar xvf GeoLite2-Country.tar.gz</span><br><span class=\"line\">mv GeoLite2-City_20190318/GeoLite2-City.mmdb ..</span><br><span class=\"line\">mv GeoLite2-Country_20190318/GeoLite2-Country.mmdb ..</span><br></pre></td></tr></table></figure>\n<p>Edit the startup script to modify your preferences</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim start.sh</span><br><span class=\"line\"></span><br><span class=\"line\">Application Options:</span><br><span class=\"line\">  -f, --country-db=FILE        Path to GeoIP country database</span><br><span class=\"line\">  -c, --city-db=FILE           Path to GeoIP city database</span><br><span class=\"line\">  -l, --listen=ADDR            Listening address (default: :8080)</span><br><span class=\"line\">  -r, --reverse-lookup         Perform reverse hostname lookups</span><br><span class=\"line\">  -p, --port-lookup            Enable port lookup</span><br><span class=\"line\">  -t, --template=FILE          Path to template (default: index.html)</span><br><span class=\"line\">  -H, --trusted-header=NAME    Header to trust for remote IP, if present (e.g. X-Real-IP)</span><br><span class=\"line\"></span><br><span class=\"line\">Help Options:</span><br><span class=\"line\">  -h, --help                   Show this help message</span><br></pre></td></tr></table></figure>\n<p>Build the container</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t echoip .</span><br></pre></td></tr></table></figure>\n<p>Run the image you built</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --rm --name echoip -p8080:8080 echoip</span><br></pre></td></tr></table></figure>\n<p>If built successfully, it can be viewed on:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://ip:8080/json</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/03/18/5c8fb80fb113e.jpg\" alt=\"gratisography-ski-lift-summer.jpg\"></p>\n"},{"title":"Java关于空指针的防范与思考","date":"2019-04-09T00:37:05.000Z","_content":"\n# Java关于空指针的防范与思考\n\n转自<https://juejin.im/post/5b9cab616fb9a05d30174491>\n\n### 空指针分析\n\n对于空指针的出现，其实一般可以归纳为以下几个原因:\n\n- 对于方法入参没有严格校验\n- 对于方法返回值没有严格的校验\n\n本质原因：\n\n对于调用的其他API没有充分的了解，使用时不知道API方法的入参是否可以接受null，不确定方法的返回值是否为null。\n\n###空指针避免方法\n\n使调用者明确知道方法的入参是否可以接受null，方法的返回值是否可以返回null。\n\n##### 返回值空指针避免\n\n1. 使用Optional\n\n- Java8前使用 Google Guava的Optional\n- Java8 引入了Optional\n\nOptional的选择和使用比较简单。但是Optional并不适用于方法入参。\n\n```\n// Java8\npublic static Optional<String> valueOf(Integer number) {\n    if (number == null) {\n        return Optional.empty();\n    }\n    String str = String.valueOf(number);\n    return Optional.of(number);\n}\n```\n\n\n\n2. 标注注解\n\n仅仅靠Optional是不够的。方法的返回类型不是Optional不能说明方法是否会返回null，因此需要一种更明确的方式。\n\n##### 方法入参控制值避免\n\n1. 标注注解\n\n### 注解的使用\n\n1. 常用的注解：\n\nfindbugs \n\n- edu.umd.cs.findbugs.annotations.NonNull\n- edu.umd.cs.findbugs.annotations.Nullable\n\njsr305 \n\n- javax.annotation.Nonnull\n- javax.annotation.Nullable\n\nspring-core \n\n- org.springframework.lang.NonNull\n- org.springframework.lang.Nullable\n\njavax-validator \n\n- javax.validation.constraints.NotNull\n- javax.validation.constraints.Null\n\nandroid-support \n\n- android.support.annotation.NonNull\n- android.support.annotation.Nullable\n\neclipse-jdt \n\n- org.eclipse.jdt.annotation.NonNull\n- org.eclipse.jdt.annotation.Nullable\n\njetbrains-annotations \n\n- org.jetbrains.annotations.NotNull\n- org.jetbrains.annotations.Nullable\n\nlombok \n\n- lombok.NonNull\n\nrt.jar \n\n- com.sun.istack.internal.NotNull\n- com.sun.istack.internal.Nullable\n\n2. 选择因素\n\n注解完备性 \n\n- 必须同时支持null注解与非null注解，如果只支持其中一个那么使用场景将会受到很大限制\n\nide代码检查 \n\n- 在ide中运行的时候如果能够对标注非null的参数和返回值进行校验，那么么将在很大程度上避免空指针\n\n- 校验逻辑大致如下:\n\n  ```\n  public static void display(@Nonnull String str) {\n      if (str == null) {\n          throw new IllegalArgumentException();\n      }\n      // do something\n  }\n  复制代码\n  ```\n\nide注解生成 \n\n- 继承父类的方法，是否可以直接继承标注在方法参数和返回类型上的注解，这个特性是很重要的，因为在大型软件系统的中都是采用分层架构，层与层之间进行调用都是通过接口，因此不支持这个特性将会导致开发人员手动在子类方法入参和返回类型上标注注解，这无疑会大大增加工作量。\n\nide智能提示 \n\n- 会对潜在产生空指针的变量进行高亮显示\n\nfindbugs支持 \n\n- 一般的公司都会要求开发人员在ide上安装findbugs，用以扫描代码分析潜在的bug\n\nsonar支持 \n\n- 大型公司都会对代码进行静态分析，一般使用SonarCube，SonarCube可以继承fingbugs和pmd的校验规则，因此支持fingdbugs可以在一定程度上说明也支持Sonar\n\n3. 各类注解支持情况\n\n| 注解支持库            | 空注解   | 非空注解  | findbugs支持 | sonar支持 | ide运行时检查 | ide智能提示 | ide代码生成 |\n| --------------------- | -------- | --------- | ------------ | --------- | ------------- | ----------- | ----------- |\n| findbugs              | @NonNull | @Nullable | 支持         | 支持      | 支持          | 支持        | 支持        |\n| jsr305                | @Nonnull | @Nullable | 支持         | 支持      | 支持          | 支持        | 支持        |\n| spring-core           | @NonNull | @Nullable | 不支持       | 不支持    | 不支持        | 支持        | 不支持      |\n| javax-validator       | @NotNull | @Null     | 不支持       | 不支持    | 不支持        | 不支持      | 支持        |\n| android-support       | @NonNull | @Nullable | 不支持       | 不支持    | 支持          | 支持        | 支持        |\n| eclipse-jdt           | @NonNull | @Nullable | 不支持       | 不支持    | 不支持        | 支持        | 支持        |\n| jetbrains-annotations | @NotNull | @Nullable | 不支持       | 不支持    | 支持          | 支持        | 支持        |\n| lombok                | @NonNull | 不支持    | 不支持       | 不支持    | 不支持        | 不支持      | 不支持      |\n| rt.jar                | @NotNull | @Nullable | 不支持       | 不支持    | 不支持        | 不支持      | 不支持      |\n\n######注意\n\n测试使用的ide是Idea，Eclipse存在一定的差异\n\nrt.jar @NotNull @Nullable属于sun的内部包，不要使用，如果有代码检查则不会被允许通过\n\neclipse-jdt和jetbrains-annotations和对应的ide绑定比较紧密不要轻易使用\n\njavax-validator和lombok主要是运行时的参数检查\n\nfingbugs原生的注解已经不再推荐，推荐使用jsr305的注解\n\n#####结论\n\n使用jsr305的注解\n\n基本类型的入参和返回值是不需要标注@Nonnull和@Nullable注解的；\n\nprivate方法，package方法，protected方法也是不需要标注的；\n\npublic方法上的非基本类型参数和返回值需要标注。\n\n### 示例\n\n* maven依赖\n\n```\n<dependency>\n    <groupId>com.google.code.findbugs</groupId>\n    <artifactId>jsr305</artifactId>\n    <version>3.0.2</version>\n</dependency>\n```\n\n* 使用示例\n\n```\n// 非空注解\n@Nonnull\npublic Integer add(@Nonnull Integer number1, @Nonnull Integer number2) {\n    Assert.notNull(number1, \"number1 must not be null\");\n    Assert.notNull(number2, \"number2 must not be null\");\n    return numnber1 + number2;\n}\n\n// 空注解\npublic static boolean isBlank(@Nullable String str) {\n    return str == null || str.trim().length() == 0;\n}\n\n// Optional\n@Nonnull\npublic static Optional<Integer> parseInte(@Nullable String str) {\n    if (str == null) {\n        return Optional.empty();\n    }\n    return Optional.of(Integer.parseInt(str));\n}\n```\n\n* Idea jsr305注解配置\n\n![Idea jsr305注解配置](https://user-gold-cdn.xitu.io/2018/9/15/165dbfd6bbbade6c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)","source":"_posts/Java关于空指针的防范与思考.md","raw":"---\ntitle: Java关于空指针的防范与思考\ndate: 2019-04-09 08:37:05\ntags:\n---\n\n# Java关于空指针的防范与思考\n\n转自<https://juejin.im/post/5b9cab616fb9a05d30174491>\n\n### 空指针分析\n\n对于空指针的出现，其实一般可以归纳为以下几个原因:\n\n- 对于方法入参没有严格校验\n- 对于方法返回值没有严格的校验\n\n本质原因：\n\n对于调用的其他API没有充分的了解，使用时不知道API方法的入参是否可以接受null，不确定方法的返回值是否为null。\n\n###空指针避免方法\n\n使调用者明确知道方法的入参是否可以接受null，方法的返回值是否可以返回null。\n\n##### 返回值空指针避免\n\n1. 使用Optional\n\n- Java8前使用 Google Guava的Optional\n- Java8 引入了Optional\n\nOptional的选择和使用比较简单。但是Optional并不适用于方法入参。\n\n```\n// Java8\npublic static Optional<String> valueOf(Integer number) {\n    if (number == null) {\n        return Optional.empty();\n    }\n    String str = String.valueOf(number);\n    return Optional.of(number);\n}\n```\n\n\n\n2. 标注注解\n\n仅仅靠Optional是不够的。方法的返回类型不是Optional不能说明方法是否会返回null，因此需要一种更明确的方式。\n\n##### 方法入参控制值避免\n\n1. 标注注解\n\n### 注解的使用\n\n1. 常用的注解：\n\nfindbugs \n\n- edu.umd.cs.findbugs.annotations.NonNull\n- edu.umd.cs.findbugs.annotations.Nullable\n\njsr305 \n\n- javax.annotation.Nonnull\n- javax.annotation.Nullable\n\nspring-core \n\n- org.springframework.lang.NonNull\n- org.springframework.lang.Nullable\n\njavax-validator \n\n- javax.validation.constraints.NotNull\n- javax.validation.constraints.Null\n\nandroid-support \n\n- android.support.annotation.NonNull\n- android.support.annotation.Nullable\n\neclipse-jdt \n\n- org.eclipse.jdt.annotation.NonNull\n- org.eclipse.jdt.annotation.Nullable\n\njetbrains-annotations \n\n- org.jetbrains.annotations.NotNull\n- org.jetbrains.annotations.Nullable\n\nlombok \n\n- lombok.NonNull\n\nrt.jar \n\n- com.sun.istack.internal.NotNull\n- com.sun.istack.internal.Nullable\n\n2. 选择因素\n\n注解完备性 \n\n- 必须同时支持null注解与非null注解，如果只支持其中一个那么使用场景将会受到很大限制\n\nide代码检查 \n\n- 在ide中运行的时候如果能够对标注非null的参数和返回值进行校验，那么么将在很大程度上避免空指针\n\n- 校验逻辑大致如下:\n\n  ```\n  public static void display(@Nonnull String str) {\n      if (str == null) {\n          throw new IllegalArgumentException();\n      }\n      // do something\n  }\n  复制代码\n  ```\n\nide注解生成 \n\n- 继承父类的方法，是否可以直接继承标注在方法参数和返回类型上的注解，这个特性是很重要的，因为在大型软件系统的中都是采用分层架构，层与层之间进行调用都是通过接口，因此不支持这个特性将会导致开发人员手动在子类方法入参和返回类型上标注注解，这无疑会大大增加工作量。\n\nide智能提示 \n\n- 会对潜在产生空指针的变量进行高亮显示\n\nfindbugs支持 \n\n- 一般的公司都会要求开发人员在ide上安装findbugs，用以扫描代码分析潜在的bug\n\nsonar支持 \n\n- 大型公司都会对代码进行静态分析，一般使用SonarCube，SonarCube可以继承fingbugs和pmd的校验规则，因此支持fingdbugs可以在一定程度上说明也支持Sonar\n\n3. 各类注解支持情况\n\n| 注解支持库            | 空注解   | 非空注解  | findbugs支持 | sonar支持 | ide运行时检查 | ide智能提示 | ide代码生成 |\n| --------------------- | -------- | --------- | ------------ | --------- | ------------- | ----------- | ----------- |\n| findbugs              | @NonNull | @Nullable | 支持         | 支持      | 支持          | 支持        | 支持        |\n| jsr305                | @Nonnull | @Nullable | 支持         | 支持      | 支持          | 支持        | 支持        |\n| spring-core           | @NonNull | @Nullable | 不支持       | 不支持    | 不支持        | 支持        | 不支持      |\n| javax-validator       | @NotNull | @Null     | 不支持       | 不支持    | 不支持        | 不支持      | 支持        |\n| android-support       | @NonNull | @Nullable | 不支持       | 不支持    | 支持          | 支持        | 支持        |\n| eclipse-jdt           | @NonNull | @Nullable | 不支持       | 不支持    | 不支持        | 支持        | 支持        |\n| jetbrains-annotations | @NotNull | @Nullable | 不支持       | 不支持    | 支持          | 支持        | 支持        |\n| lombok                | @NonNull | 不支持    | 不支持       | 不支持    | 不支持        | 不支持      | 不支持      |\n| rt.jar                | @NotNull | @Nullable | 不支持       | 不支持    | 不支持        | 不支持      | 不支持      |\n\n######注意\n\n测试使用的ide是Idea，Eclipse存在一定的差异\n\nrt.jar @NotNull @Nullable属于sun的内部包，不要使用，如果有代码检查则不会被允许通过\n\neclipse-jdt和jetbrains-annotations和对应的ide绑定比较紧密不要轻易使用\n\njavax-validator和lombok主要是运行时的参数检查\n\nfingbugs原生的注解已经不再推荐，推荐使用jsr305的注解\n\n#####结论\n\n使用jsr305的注解\n\n基本类型的入参和返回值是不需要标注@Nonnull和@Nullable注解的；\n\nprivate方法，package方法，protected方法也是不需要标注的；\n\npublic方法上的非基本类型参数和返回值需要标注。\n\n### 示例\n\n* maven依赖\n\n```\n<dependency>\n    <groupId>com.google.code.findbugs</groupId>\n    <artifactId>jsr305</artifactId>\n    <version>3.0.2</version>\n</dependency>\n```\n\n* 使用示例\n\n```\n// 非空注解\n@Nonnull\npublic Integer add(@Nonnull Integer number1, @Nonnull Integer number2) {\n    Assert.notNull(number1, \"number1 must not be null\");\n    Assert.notNull(number2, \"number2 must not be null\");\n    return numnber1 + number2;\n}\n\n// 空注解\npublic static boolean isBlank(@Nullable String str) {\n    return str == null || str.trim().length() == 0;\n}\n\n// Optional\n@Nonnull\npublic static Optional<Integer> parseInte(@Nullable String str) {\n    if (str == null) {\n        return Optional.empty();\n    }\n    return Optional.of(Integer.parseInt(str));\n}\n```\n\n* Idea jsr305注解配置\n\n![Idea jsr305注解配置](https://user-gold-cdn.xitu.io/2018/9/15/165dbfd6bbbade6c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)","slug":"Java关于空指针的防范与思考","published":1,"updated":"2019-04-09T00:38:46.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjubbfovx0004788a772zmakf","content":"<h1 id=\"Java关于空指针的防范与思考\"><a href=\"#Java关于空指针的防范与思考\" class=\"headerlink\" title=\"Java关于空指针的防范与思考\"></a>Java关于空指针的防范与思考</h1><p>转自<a href=\"https://juejin.im/post/5b9cab616fb9a05d30174491\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b9cab616fb9a05d30174491</a></p>\n<h3 id=\"空指针分析\"><a href=\"#空指针分析\" class=\"headerlink\" title=\"空指针分析\"></a>空指针分析</h3><p>对于空指针的出现，其实一般可以归纳为以下几个原因:</p>\n<ul>\n<li>对于方法入参没有严格校验</li>\n<li>对于方法返回值没有严格的校验</li>\n</ul>\n<p>本质原因：</p>\n<p>对于调用的其他API没有充分的了解，使用时不知道API方法的入参是否可以接受null，不确定方法的返回值是否为null。</p>\n<p>###空指针避免方法</p>\n<p>使调用者明确知道方法的入参是否可以接受null，方法的返回值是否可以返回null。</p>\n<h5 id=\"返回值空指针避免\"><a href=\"#返回值空指针避免\" class=\"headerlink\" title=\"返回值空指针避免\"></a>返回值空指针避免</h5><ol>\n<li>使用Optional</li>\n</ol>\n<ul>\n<li>Java8前使用 Google Guava的Optional</li>\n<li>Java8 引入了Optional</li>\n</ul>\n<p>Optional的选择和使用比较简单。但是Optional并不适用于方法入参。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Java8</span><br><span class=\"line\">public static Optional&lt;String&gt; valueOf(Integer number) &#123;</span><br><span class=\"line\">    if (number == null) &#123;</span><br><span class=\"line\">        return Optional.empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String str = String.valueOf(number);</span><br><span class=\"line\">    return Optional.of(number);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>标注注解</li>\n</ol>\n<p>仅仅靠Optional是不够的。方法的返回类型不是Optional不能说明方法是否会返回null，因此需要一种更明确的方式。</p>\n<h5 id=\"方法入参控制值避免\"><a href=\"#方法入参控制值避免\" class=\"headerlink\" title=\"方法入参控制值避免\"></a>方法入参控制值避免</h5><ol>\n<li>标注注解</li>\n</ol>\n<h3 id=\"注解的使用\"><a href=\"#注解的使用\" class=\"headerlink\" title=\"注解的使用\"></a>注解的使用</h3><ol>\n<li>常用的注解：</li>\n</ol>\n<p>findbugs </p>\n<ul>\n<li>edu.umd.cs.findbugs.annotations.NonNull</li>\n<li>edu.umd.cs.findbugs.annotations.Nullable</li>\n</ul>\n<p>jsr305 </p>\n<ul>\n<li>javax.annotation.Nonnull</li>\n<li>javax.annotation.Nullable</li>\n</ul>\n<p>spring-core </p>\n<ul>\n<li>org.springframework.lang.NonNull</li>\n<li>org.springframework.lang.Nullable</li>\n</ul>\n<p>javax-validator </p>\n<ul>\n<li>javax.validation.constraints.NotNull</li>\n<li>javax.validation.constraints.Null</li>\n</ul>\n<p>android-support </p>\n<ul>\n<li>android.support.annotation.NonNull</li>\n<li>android.support.annotation.Nullable</li>\n</ul>\n<p>eclipse-jdt </p>\n<ul>\n<li>org.eclipse.jdt.annotation.NonNull</li>\n<li>org.eclipse.jdt.annotation.Nullable</li>\n</ul>\n<p>jetbrains-annotations </p>\n<ul>\n<li>org.jetbrains.annotations.NotNull</li>\n<li>org.jetbrains.annotations.Nullable</li>\n</ul>\n<p>lombok </p>\n<ul>\n<li>lombok.NonNull</li>\n</ul>\n<p>rt.jar </p>\n<ul>\n<li>com.sun.istack.internal.NotNull</li>\n<li>com.sun.istack.internal.Nullable</li>\n</ul>\n<ol start=\"2\">\n<li>选择因素</li>\n</ol>\n<p>注解完备性 </p>\n<ul>\n<li>必须同时支持null注解与非null注解，如果只支持其中一个那么使用场景将会受到很大限制</li>\n</ul>\n<p>ide代码检查 </p>\n<ul>\n<li><p>在ide中运行的时候如果能够对标注非null的参数和返回值进行校验，那么么将在很大程度上避免空指针</p>\n</li>\n<li><p>校验逻辑大致如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void display(@Nonnull String str) &#123;</span><br><span class=\"line\">    if (str == null) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // do something</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ide注解生成 </p>\n<ul>\n<li>继承父类的方法，是否可以直接继承标注在方法参数和返回类型上的注解，这个特性是很重要的，因为在大型软件系统的中都是采用分层架构，层与层之间进行调用都是通过接口，因此不支持这个特性将会导致开发人员手动在子类方法入参和返回类型上标注注解，这无疑会大大增加工作量。</li>\n</ul>\n<p>ide智能提示 </p>\n<ul>\n<li>会对潜在产生空指针的变量进行高亮显示</li>\n</ul>\n<p>findbugs支持 </p>\n<ul>\n<li>一般的公司都会要求开发人员在ide上安装findbugs，用以扫描代码分析潜在的bug</li>\n</ul>\n<p>sonar支持 </p>\n<ul>\n<li>大型公司都会对代码进行静态分析，一般使用SonarCube，SonarCube可以继承fingbugs和pmd的校验规则，因此支持fingdbugs可以在一定程度上说明也支持Sonar</li>\n</ul>\n<ol start=\"3\">\n<li>各类注解支持情况</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>注解支持库</th>\n<th>空注解</th>\n<th>非空注解</th>\n<th>findbugs支持</th>\n<th>sonar支持</th>\n<th>ide运行时检查</th>\n<th>ide智能提示</th>\n<th>ide代码生成</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>findbugs</td>\n<td>@NonNull</td>\n<td>@Nullable</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>jsr305</td>\n<td>@Nonnull</td>\n<td>@Nullable</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>spring-core</td>\n<td>@NonNull</td>\n<td>@Nullable</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>javax-validator</td>\n<td>@NotNull</td>\n<td>@Null</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>android-support</td>\n<td>@NonNull</td>\n<td>@Nullable</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>eclipse-jdt</td>\n<td>@NonNull</td>\n<td>@Nullable</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>jetbrains-annotations</td>\n<td>@NotNull</td>\n<td>@Nullable</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>lombok</td>\n<td>@NonNull</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>rt.jar</td>\n<td>@NotNull</td>\n<td>@Nullable</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table>\n<p>######注意</p>\n<p>测试使用的ide是Idea，Eclipse存在一定的差异</p>\n<p>rt.jar @NotNull @Nullable属于sun的内部包，不要使用，如果有代码检查则不会被允许通过</p>\n<p>eclipse-jdt和jetbrains-annotations和对应的ide绑定比较紧密不要轻易使用</p>\n<p>javax-validator和lombok主要是运行时的参数检查</p>\n<p>fingbugs原生的注解已经不再推荐，推荐使用jsr305的注解</p>\n<p>#####结论</p>\n<p>使用jsr305的注解</p>\n<p>基本类型的入参和返回值是不需要标注@Nonnull和@Nullable注解的；</p>\n<p>private方法，package方法，protected方法也是不需要标注的；</p>\n<p>public方法上的非基本类型参数和返回值需要标注。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>maven依赖</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.google.code.findbugs&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jsr305&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用示例</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 非空注解</span><br><span class=\"line\">@Nonnull</span><br><span class=\"line\">public Integer add(@Nonnull Integer number1, @Nonnull Integer number2) &#123;</span><br><span class=\"line\">    Assert.notNull(number1, &quot;number1 must not be null&quot;);</span><br><span class=\"line\">    Assert.notNull(number2, &quot;number2 must not be null&quot;);</span><br><span class=\"line\">    return numnber1 + number2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 空注解</span><br><span class=\"line\">public static boolean isBlank(@Nullable String str) &#123;</span><br><span class=\"line\">    return str == null || str.trim().length() == 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Optional</span><br><span class=\"line\">@Nonnull</span><br><span class=\"line\">public static Optional&lt;Integer&gt; parseInte(@Nullable String str) &#123;</span><br><span class=\"line\">    if (str == null) &#123;</span><br><span class=\"line\">        return Optional.empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Optional.of(Integer.parseInt(str));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Idea jsr305注解配置</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/15/165dbfd6bbbade6c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Idea jsr305注解配置\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java关于空指针的防范与思考\"><a href=\"#Java关于空指针的防范与思考\" class=\"headerlink\" title=\"Java关于空指针的防范与思考\"></a>Java关于空指针的防范与思考</h1><p>转自<a href=\"https://juejin.im/post/5b9cab616fb9a05d30174491\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b9cab616fb9a05d30174491</a></p>\n<h3 id=\"空指针分析\"><a href=\"#空指针分析\" class=\"headerlink\" title=\"空指针分析\"></a>空指针分析</h3><p>对于空指针的出现，其实一般可以归纳为以下几个原因:</p>\n<ul>\n<li>对于方法入参没有严格校验</li>\n<li>对于方法返回值没有严格的校验</li>\n</ul>\n<p>本质原因：</p>\n<p>对于调用的其他API没有充分的了解，使用时不知道API方法的入参是否可以接受null，不确定方法的返回值是否为null。</p>\n<p>###空指针避免方法</p>\n<p>使调用者明确知道方法的入参是否可以接受null，方法的返回值是否可以返回null。</p>\n<h5 id=\"返回值空指针避免\"><a href=\"#返回值空指针避免\" class=\"headerlink\" title=\"返回值空指针避免\"></a>返回值空指针避免</h5><ol>\n<li>使用Optional</li>\n</ol>\n<ul>\n<li>Java8前使用 Google Guava的Optional</li>\n<li>Java8 引入了Optional</li>\n</ul>\n<p>Optional的选择和使用比较简单。但是Optional并不适用于方法入参。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Java8</span><br><span class=\"line\">public static Optional&lt;String&gt; valueOf(Integer number) &#123;</span><br><span class=\"line\">    if (number == null) &#123;</span><br><span class=\"line\">        return Optional.empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String str = String.valueOf(number);</span><br><span class=\"line\">    return Optional.of(number);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>标注注解</li>\n</ol>\n<p>仅仅靠Optional是不够的。方法的返回类型不是Optional不能说明方法是否会返回null，因此需要一种更明确的方式。</p>\n<h5 id=\"方法入参控制值避免\"><a href=\"#方法入参控制值避免\" class=\"headerlink\" title=\"方法入参控制值避免\"></a>方法入参控制值避免</h5><ol>\n<li>标注注解</li>\n</ol>\n<h3 id=\"注解的使用\"><a href=\"#注解的使用\" class=\"headerlink\" title=\"注解的使用\"></a>注解的使用</h3><ol>\n<li>常用的注解：</li>\n</ol>\n<p>findbugs </p>\n<ul>\n<li>edu.umd.cs.findbugs.annotations.NonNull</li>\n<li>edu.umd.cs.findbugs.annotations.Nullable</li>\n</ul>\n<p>jsr305 </p>\n<ul>\n<li>javax.annotation.Nonnull</li>\n<li>javax.annotation.Nullable</li>\n</ul>\n<p>spring-core </p>\n<ul>\n<li>org.springframework.lang.NonNull</li>\n<li>org.springframework.lang.Nullable</li>\n</ul>\n<p>javax-validator </p>\n<ul>\n<li>javax.validation.constraints.NotNull</li>\n<li>javax.validation.constraints.Null</li>\n</ul>\n<p>android-support </p>\n<ul>\n<li>android.support.annotation.NonNull</li>\n<li>android.support.annotation.Nullable</li>\n</ul>\n<p>eclipse-jdt </p>\n<ul>\n<li>org.eclipse.jdt.annotation.NonNull</li>\n<li>org.eclipse.jdt.annotation.Nullable</li>\n</ul>\n<p>jetbrains-annotations </p>\n<ul>\n<li>org.jetbrains.annotations.NotNull</li>\n<li>org.jetbrains.annotations.Nullable</li>\n</ul>\n<p>lombok </p>\n<ul>\n<li>lombok.NonNull</li>\n</ul>\n<p>rt.jar </p>\n<ul>\n<li>com.sun.istack.internal.NotNull</li>\n<li>com.sun.istack.internal.Nullable</li>\n</ul>\n<ol start=\"2\">\n<li>选择因素</li>\n</ol>\n<p>注解完备性 </p>\n<ul>\n<li>必须同时支持null注解与非null注解，如果只支持其中一个那么使用场景将会受到很大限制</li>\n</ul>\n<p>ide代码检查 </p>\n<ul>\n<li><p>在ide中运行的时候如果能够对标注非null的参数和返回值进行校验，那么么将在很大程度上避免空指针</p>\n</li>\n<li><p>校验逻辑大致如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void display(@Nonnull String str) &#123;</span><br><span class=\"line\">    if (str == null) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // do something</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ide注解生成 </p>\n<ul>\n<li>继承父类的方法，是否可以直接继承标注在方法参数和返回类型上的注解，这个特性是很重要的，因为在大型软件系统的中都是采用分层架构，层与层之间进行调用都是通过接口，因此不支持这个特性将会导致开发人员手动在子类方法入参和返回类型上标注注解，这无疑会大大增加工作量。</li>\n</ul>\n<p>ide智能提示 </p>\n<ul>\n<li>会对潜在产生空指针的变量进行高亮显示</li>\n</ul>\n<p>findbugs支持 </p>\n<ul>\n<li>一般的公司都会要求开发人员在ide上安装findbugs，用以扫描代码分析潜在的bug</li>\n</ul>\n<p>sonar支持 </p>\n<ul>\n<li>大型公司都会对代码进行静态分析，一般使用SonarCube，SonarCube可以继承fingbugs和pmd的校验规则，因此支持fingdbugs可以在一定程度上说明也支持Sonar</li>\n</ul>\n<ol start=\"3\">\n<li>各类注解支持情况</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>注解支持库</th>\n<th>空注解</th>\n<th>非空注解</th>\n<th>findbugs支持</th>\n<th>sonar支持</th>\n<th>ide运行时检查</th>\n<th>ide智能提示</th>\n<th>ide代码生成</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>findbugs</td>\n<td>@NonNull</td>\n<td>@Nullable</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>jsr305</td>\n<td>@Nonnull</td>\n<td>@Nullable</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>spring-core</td>\n<td>@NonNull</td>\n<td>@Nullable</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>javax-validator</td>\n<td>@NotNull</td>\n<td>@Null</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>android-support</td>\n<td>@NonNull</td>\n<td>@Nullable</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>eclipse-jdt</td>\n<td>@NonNull</td>\n<td>@Nullable</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>jetbrains-annotations</td>\n<td>@NotNull</td>\n<td>@Nullable</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>lombok</td>\n<td>@NonNull</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>rt.jar</td>\n<td>@NotNull</td>\n<td>@Nullable</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table>\n<p>######注意</p>\n<p>测试使用的ide是Idea，Eclipse存在一定的差异</p>\n<p>rt.jar @NotNull @Nullable属于sun的内部包，不要使用，如果有代码检查则不会被允许通过</p>\n<p>eclipse-jdt和jetbrains-annotations和对应的ide绑定比较紧密不要轻易使用</p>\n<p>javax-validator和lombok主要是运行时的参数检查</p>\n<p>fingbugs原生的注解已经不再推荐，推荐使用jsr305的注解</p>\n<p>#####结论</p>\n<p>使用jsr305的注解</p>\n<p>基本类型的入参和返回值是不需要标注@Nonnull和@Nullable注解的；</p>\n<p>private方法，package方法，protected方法也是不需要标注的；</p>\n<p>public方法上的非基本类型参数和返回值需要标注。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>maven依赖</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.google.code.findbugs&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jsr305&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用示例</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 非空注解</span><br><span class=\"line\">@Nonnull</span><br><span class=\"line\">public Integer add(@Nonnull Integer number1, @Nonnull Integer number2) &#123;</span><br><span class=\"line\">    Assert.notNull(number1, &quot;number1 must not be null&quot;);</span><br><span class=\"line\">    Assert.notNull(number2, &quot;number2 must not be null&quot;);</span><br><span class=\"line\">    return numnber1 + number2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 空注解</span><br><span class=\"line\">public static boolean isBlank(@Nullable String str) &#123;</span><br><span class=\"line\">    return str == null || str.trim().length() == 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Optional</span><br><span class=\"line\">@Nonnull</span><br><span class=\"line\">public static Optional&lt;Integer&gt; parseInte(@Nullable String str) &#123;</span><br><span class=\"line\">    if (str == null) &#123;</span><br><span class=\"line\">        return Optional.empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Optional.of(Integer.parseInt(str));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Idea jsr305注解配置</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/15/165dbfd6bbbade6c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Idea jsr305注解配置\"></p>\n"},{"title":"docker小白入门篇","date":"2019-04-04T14:19:59.000Z","_content":"","source":"_posts/docker小白入门篇.md","raw":"---\ntitle: docker小白入门篇\ndate: 2019-04-04 22:19:59\ntags:\n---\n","slug":"docker小白入门篇","published":1,"updated":"2019-04-04T14:19:59.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjubbfowz0005788az5xb5t9r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Mysql的时间比较和DATE_FORMAT踩的坑","date":"2019-04-03T14:44:31.000Z","_content":"\n### 踩坑背景：\n\n   在一次先插入数据再进行查询的业务逻辑操作过程中，有一个字段数据库类型是datetime,插入操作是在java代码中new Date(),赋值到该数据库字段进行插入，而后同同一个date作为查询条件，代入sql进行查询，神奇的事情出现了，竟然查不到刚刚插入的数据。\n\n##### 原因分析：\n\n在进行插入操作中，Mysql做了格式format，毫秒会进行处理，四舍五入的方式处理，最终存入数据库的数据毫秒位均是零，but 在进行查询的时候是不进行format的，会带有毫米位，所以绝大多数情况是查不到的，除非new Date(),恰好是整秒。\n\n##### 解决方案：\n\n对查询的date进行date_format。dete_format 的格式化方式和其他的还有差别，具体如下：\n\n| 格式 | 描述                                           |\n| ---- | ---------------------------------------------- |\n| %a   | 缩写星期名                                     |\n| %b   | 缩写月名                                       |\n| %c   | 月，数值                                       |\n| %D   | 带有英文前缀的月中的天                         |\n| %d   | 月的天，数值(00-31)                            |\n| %e   | 月的天，数值(0-31)                             |\n| %f   | 微秒                                           |\n| %H   | 小时 (00-23)                                   |\n| %h   | 小时 (01-12)                                   |\n| %I   | 小时 (01-12)                                   |\n| %i   | 分钟，数值(00-59)                              |\n| %j   | 年的天 (001-366)                               |\n| %k   | 小时 (0-23)                                    |\n| %l   | 小时 (1-12)                                    |\n| %M   | 月名                                           |\n| %m   | 月，数值(00-12)                                |\n| %p   | AM 或 PM                                       |\n| %r   | 时间，12-小时（hh:mm:ss AM 或 PM）             |\n| %S   | 秒(00-59)                                      |\n| %s   | 秒(00-59)                                      |\n| %T   | 时间, 24-小时 (hh:mm:ss)                       |\n| %U   | 周 (00-53) 星期日是一周的第一天                |\n| %u   | 周 (00-53) 星期一是一周的第一天                |\n| %V   | 周 (01-53) 星期日是一周的第一天，与 %X 使用    |\n| %v   | 周 (01-53) 星期一是一周的第一天，与 %x 使用    |\n| %W   | 星期名                                         |\n| %w   | 周的天 （0=星期日, 6=星期六）                  |\n| %X   | 年，其中的星期日是周的第一天，4 位，与 %V 使用 |\n| %x   | 年，其中的星期一是周的第一天，4 位，与 %v 使用 |\n| %Y   | 年，4 位                                       |\n| %y   | 年，2 位                                       |\n\n务必注意分钟是%i\n\n##### 示例\n\n```\nDATE_FORMAT(NOW(),'%b %d %Y %h:%i %p')\nDATE_FORMAT(NOW(),'%m-%d-%Y')\nDATE_FORMAT(NOW(),'%d %b %y')\nDATE_FORMAT(NOW(),'%d %b %Y %T:%f')\n```\n\n结果\n\n```\nDec 29 2008 11:45 PM\n12-29-2008\n29 Dec 08\n29 Dec 2008 16:25:46.635\n```\n\n","source":"_posts/Mysql的时间比较和DATE-FORMAT踩的坑.md","raw":"---\n\ntitle: Mysql的时间比较和DATE_FORMAT踩的坑\ndate: 2019-04-03 22:44:31\ntags:\n---\n\n### 踩坑背景：\n\n   在一次先插入数据再进行查询的业务逻辑操作过程中，有一个字段数据库类型是datetime,插入操作是在java代码中new Date(),赋值到该数据库字段进行插入，而后同同一个date作为查询条件，代入sql进行查询，神奇的事情出现了，竟然查不到刚刚插入的数据。\n\n##### 原因分析：\n\n在进行插入操作中，Mysql做了格式format，毫秒会进行处理，四舍五入的方式处理，最终存入数据库的数据毫秒位均是零，but 在进行查询的时候是不进行format的，会带有毫米位，所以绝大多数情况是查不到的，除非new Date(),恰好是整秒。\n\n##### 解决方案：\n\n对查询的date进行date_format。dete_format 的格式化方式和其他的还有差别，具体如下：\n\n| 格式 | 描述                                           |\n| ---- | ---------------------------------------------- |\n| %a   | 缩写星期名                                     |\n| %b   | 缩写月名                                       |\n| %c   | 月，数值                                       |\n| %D   | 带有英文前缀的月中的天                         |\n| %d   | 月的天，数值(00-31)                            |\n| %e   | 月的天，数值(0-31)                             |\n| %f   | 微秒                                           |\n| %H   | 小时 (00-23)                                   |\n| %h   | 小时 (01-12)                                   |\n| %I   | 小时 (01-12)                                   |\n| %i   | 分钟，数值(00-59)                              |\n| %j   | 年的天 (001-366)                               |\n| %k   | 小时 (0-23)                                    |\n| %l   | 小时 (1-12)                                    |\n| %M   | 月名                                           |\n| %m   | 月，数值(00-12)                                |\n| %p   | AM 或 PM                                       |\n| %r   | 时间，12-小时（hh:mm:ss AM 或 PM）             |\n| %S   | 秒(00-59)                                      |\n| %s   | 秒(00-59)                                      |\n| %T   | 时间, 24-小时 (hh:mm:ss)                       |\n| %U   | 周 (00-53) 星期日是一周的第一天                |\n| %u   | 周 (00-53) 星期一是一周的第一天                |\n| %V   | 周 (01-53) 星期日是一周的第一天，与 %X 使用    |\n| %v   | 周 (01-53) 星期一是一周的第一天，与 %x 使用    |\n| %W   | 星期名                                         |\n| %w   | 周的天 （0=星期日, 6=星期六）                  |\n| %X   | 年，其中的星期日是周的第一天，4 位，与 %V 使用 |\n| %x   | 年，其中的星期一是周的第一天，4 位，与 %v 使用 |\n| %Y   | 年，4 位                                       |\n| %y   | 年，2 位                                       |\n\n务必注意分钟是%i\n\n##### 示例\n\n```\nDATE_FORMAT(NOW(),'%b %d %Y %h:%i %p')\nDATE_FORMAT(NOW(),'%m-%d-%Y')\nDATE_FORMAT(NOW(),'%d %b %y')\nDATE_FORMAT(NOW(),'%d %b %Y %T:%f')\n```\n\n结果\n\n```\nDec 29 2008 11:45 PM\n12-29-2008\n29 Dec 08\n29 Dec 2008 16:25:46.635\n```\n\n","slug":"Mysql的时间比较和DATE-FORMAT踩的坑","published":1,"updated":"2019-04-03T15:11:45.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjubbfox00006788awal171os","content":"<h3 id=\"踩坑背景：\"><a href=\"#踩坑背景：\" class=\"headerlink\" title=\"踩坑背景：\"></a>踩坑背景：</h3><p>   在一次先插入数据再进行查询的业务逻辑操作过程中，有一个字段数据库类型是datetime,插入操作是在java代码中new Date(),赋值到该数据库字段进行插入，而后同同一个date作为查询条件，代入sql进行查询，神奇的事情出现了，竟然查不到刚刚插入的数据。</p>\n<h5 id=\"原因分析：\"><a href=\"#原因分析：\" class=\"headerlink\" title=\"原因分析：\"></a>原因分析：</h5><p>在进行插入操作中，Mysql做了格式format，毫秒会进行处理，四舍五入的方式处理，最终存入数据库的数据毫秒位均是零，but 在进行查询的时候是不进行format的，会带有毫米位，所以绝大多数情况是查不到的，除非new Date(),恰好是整秒。</p>\n<h5 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h5><p>对查询的date进行date_format。dete_format 的格式化方式和其他的还有差别，具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>缩写星期名</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>缩写月名</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>月，数值</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>带有英文前缀的月中的天</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>月的天，数值(00-31)</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>月的天，数值(0-31)</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>微秒</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>小时 (00-23)</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>小时 (01-12)</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>小时 (01-12)</td>\n</tr>\n<tr>\n<td>%i</td>\n<td>分钟，数值(00-59)</td>\n</tr>\n<tr>\n<td>%j</td>\n<td>年的天 (001-366)</td>\n</tr>\n<tr>\n<td>%k</td>\n<td>小时 (0-23)</td>\n</tr>\n<tr>\n<td>%l</td>\n<td>小时 (1-12)</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>月名</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>月，数值(00-12)</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>AM 或 PM</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>时间，12-小时（hh:mm:ss AM 或 PM）</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>秒(00-59)</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>秒(00-59)</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>时间, 24-小时 (hh:mm:ss)</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>周 (00-53) 星期日是一周的第一天</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>周 (00-53) 星期一是一周的第一天</td>\n</tr>\n<tr>\n<td>%V</td>\n<td>周 (01-53) 星期日是一周的第一天，与 %X 使用</td>\n</tr>\n<tr>\n<td>%v</td>\n<td>周 (01-53) 星期一是一周的第一天，与 %x 使用</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>星期名</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>周的天 （0=星期日, 6=星期六）</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>年，其中的星期日是周的第一天，4 位，与 %V 使用</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>年，其中的星期一是周的第一天，4 位，与 %v 使用</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>年，4 位</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>年，2 位</td>\n</tr>\n</tbody>\n</table>\n<p>务必注意分钟是%i</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATE_FORMAT(NOW(),&apos;%b %d %Y %h:%i %p&apos;)</span><br><span class=\"line\">DATE_FORMAT(NOW(),&apos;%m-%d-%Y&apos;)</span><br><span class=\"line\">DATE_FORMAT(NOW(),&apos;%d %b %y&apos;)</span><br><span class=\"line\">DATE_FORMAT(NOW(),&apos;%d %b %Y %T:%f&apos;)</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dec 29 2008 11:45 PM</span><br><span class=\"line\">12-29-2008</span><br><span class=\"line\">29 Dec 08</span><br><span class=\"line\">29 Dec 2008 16:25:46.635</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"踩坑背景：\"><a href=\"#踩坑背景：\" class=\"headerlink\" title=\"踩坑背景：\"></a>踩坑背景：</h3><p>   在一次先插入数据再进行查询的业务逻辑操作过程中，有一个字段数据库类型是datetime,插入操作是在java代码中new Date(),赋值到该数据库字段进行插入，而后同同一个date作为查询条件，代入sql进行查询，神奇的事情出现了，竟然查不到刚刚插入的数据。</p>\n<h5 id=\"原因分析：\"><a href=\"#原因分析：\" class=\"headerlink\" title=\"原因分析：\"></a>原因分析：</h5><p>在进行插入操作中，Mysql做了格式format，毫秒会进行处理，四舍五入的方式处理，最终存入数据库的数据毫秒位均是零，but 在进行查询的时候是不进行format的，会带有毫米位，所以绝大多数情况是查不到的，除非new Date(),恰好是整秒。</p>\n<h5 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h5><p>对查询的date进行date_format。dete_format 的格式化方式和其他的还有差别，具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>缩写星期名</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>缩写月名</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>月，数值</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>带有英文前缀的月中的天</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>月的天，数值(00-31)</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>月的天，数值(0-31)</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>微秒</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>小时 (00-23)</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>小时 (01-12)</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>小时 (01-12)</td>\n</tr>\n<tr>\n<td>%i</td>\n<td>分钟，数值(00-59)</td>\n</tr>\n<tr>\n<td>%j</td>\n<td>年的天 (001-366)</td>\n</tr>\n<tr>\n<td>%k</td>\n<td>小时 (0-23)</td>\n</tr>\n<tr>\n<td>%l</td>\n<td>小时 (1-12)</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>月名</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>月，数值(00-12)</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>AM 或 PM</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>时间，12-小时（hh:mm:ss AM 或 PM）</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>秒(00-59)</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>秒(00-59)</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>时间, 24-小时 (hh:mm:ss)</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>周 (00-53) 星期日是一周的第一天</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>周 (00-53) 星期一是一周的第一天</td>\n</tr>\n<tr>\n<td>%V</td>\n<td>周 (01-53) 星期日是一周的第一天，与 %X 使用</td>\n</tr>\n<tr>\n<td>%v</td>\n<td>周 (01-53) 星期一是一周的第一天，与 %x 使用</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>星期名</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>周的天 （0=星期日, 6=星期六）</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>年，其中的星期日是周的第一天，4 位，与 %V 使用</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>年，其中的星期一是周的第一天，4 位，与 %v 使用</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>年，4 位</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>年，2 位</td>\n</tr>\n</tbody>\n</table>\n<p>务必注意分钟是%i</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATE_FORMAT(NOW(),&apos;%b %d %Y %h:%i %p&apos;)</span><br><span class=\"line\">DATE_FORMAT(NOW(),&apos;%m-%d-%Y&apos;)</span><br><span class=\"line\">DATE_FORMAT(NOW(),&apos;%d %b %y&apos;)</span><br><span class=\"line\">DATE_FORMAT(NOW(),&apos;%d %b %Y %T:%f&apos;)</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dec 29 2008 11:45 PM</span><br><span class=\"line\">12-29-2008</span><br><span class=\"line\">29 Dec 08</span><br><span class=\"line\">29 Dec 2008 16:25:46.635</span><br></pre></td></tr></table></figure>\n"},{"title":"Mybatis的if-else","date":"2019-04-10T14:20:51.000Z","_content":"\n## Mybatis的if-else\n\n#### mybaits 中没有else要用chose when otherwise 代替\n\n表示方法：\n\n```\n<choose>\n    <when test=\"\">\n        //...\n    </when>\n    <otherwise>\n        //...\n    </otherwise>\n</choose>\n```\n\nchoose为一个整体 \nwhen是if \notherwise是else\n\n示例：\n\n```\n<select id=\"selectSelective\" resultMap=\"xxx\" parameterType=\"xxx\">\n    select\n    <include refid=\"Base_Column_List\"/>\n    from xxx\n    where del_flag=0\n    <choose>\n        <when test=\"xxx !=null and xxx != ''\">\n            and xxx like concat(concat('%', #{xxx}), '%')\n        </when>\n        <otherwise>\n            and xxx like '**%'\n        </otherwise>\n    </choose>\n</select>\n```\n\n","source":"_posts/Mybatis的if-else.md","raw":"---\ntitle: Mybatis的if-else\ndate: 2019-04-10 22:20:51\ntags:\n---\n\n## Mybatis的if-else\n\n#### mybaits 中没有else要用chose when otherwise 代替\n\n表示方法：\n\n```\n<choose>\n    <when test=\"\">\n        //...\n    </when>\n    <otherwise>\n        //...\n    </otherwise>\n</choose>\n```\n\nchoose为一个整体 \nwhen是if \notherwise是else\n\n示例：\n\n```\n<select id=\"selectSelective\" resultMap=\"xxx\" parameterType=\"xxx\">\n    select\n    <include refid=\"Base_Column_List\"/>\n    from xxx\n    where del_flag=0\n    <choose>\n        <when test=\"xxx !=null and xxx != ''\">\n            and xxx like concat(concat('%', #{xxx}), '%')\n        </when>\n        <otherwise>\n            and xxx like '**%'\n        </otherwise>\n    </choose>\n</select>\n```\n\n","slug":"Mybatis的if-else","published":1,"updated":"2019-04-10T14:21:31.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjubbfox20007788a91ez9gka","content":"<h2 id=\"Mybatis的if-else\"><a href=\"#Mybatis的if-else\" class=\"headerlink\" title=\"Mybatis的if-else\"></a>Mybatis的if-else</h2><h4 id=\"mybaits-中没有else要用chose-when-otherwise-代替\"><a href=\"#mybaits-中没有else要用chose-when-otherwise-代替\" class=\"headerlink\" title=\"mybaits 中没有else要用chose when otherwise 代替\"></a>mybaits 中没有else要用chose when otherwise 代替</h4><p>表示方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;choose&gt;</span><br><span class=\"line\">    &lt;when test=&quot;&quot;&gt;</span><br><span class=\"line\">        //...</span><br><span class=\"line\">    &lt;/when&gt;</span><br><span class=\"line\">    &lt;otherwise&gt;</span><br><span class=\"line\">        //...</span><br><span class=\"line\">    &lt;/otherwise&gt;</span><br><span class=\"line\">&lt;/choose&gt;</span><br></pre></td></tr></table></figure>\n<p>choose为一个整体<br>when是if<br>otherwise是else</p>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;selectSelective&quot; resultMap=&quot;xxx&quot; parameterType=&quot;xxx&quot;&gt;</span><br><span class=\"line\">    select</span><br><span class=\"line\">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class=\"line\">    from xxx</span><br><span class=\"line\">    where del_flag=0</span><br><span class=\"line\">    &lt;choose&gt;</span><br><span class=\"line\">        &lt;when test=&quot;xxx !=null and xxx != &apos;&apos;&quot;&gt;</span><br><span class=\"line\">            and xxx like concat(concat(&apos;%&apos;, #&#123;xxx&#125;), &apos;%&apos;)</span><br><span class=\"line\">        &lt;/when&gt;</span><br><span class=\"line\">        &lt;otherwise&gt;</span><br><span class=\"line\">            and xxx like &apos;**%&apos;</span><br><span class=\"line\">        &lt;/otherwise&gt;</span><br><span class=\"line\">    &lt;/choose&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Mybatis的if-else\"><a href=\"#Mybatis的if-else\" class=\"headerlink\" title=\"Mybatis的if-else\"></a>Mybatis的if-else</h2><h4 id=\"mybaits-中没有else要用chose-when-otherwise-代替\"><a href=\"#mybaits-中没有else要用chose-when-otherwise-代替\" class=\"headerlink\" title=\"mybaits 中没有else要用chose when otherwise 代替\"></a>mybaits 中没有else要用chose when otherwise 代替</h4><p>表示方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;choose&gt;</span><br><span class=\"line\">    &lt;when test=&quot;&quot;&gt;</span><br><span class=\"line\">        //...</span><br><span class=\"line\">    &lt;/when&gt;</span><br><span class=\"line\">    &lt;otherwise&gt;</span><br><span class=\"line\">        //...</span><br><span class=\"line\">    &lt;/otherwise&gt;</span><br><span class=\"line\">&lt;/choose&gt;</span><br></pre></td></tr></table></figure>\n<p>choose为一个整体<br>when是if<br>otherwise是else</p>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;selectSelective&quot; resultMap=&quot;xxx&quot; parameterType=&quot;xxx&quot;&gt;</span><br><span class=\"line\">    select</span><br><span class=\"line\">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class=\"line\">    from xxx</span><br><span class=\"line\">    where del_flag=0</span><br><span class=\"line\">    &lt;choose&gt;</span><br><span class=\"line\">        &lt;when test=&quot;xxx !=null and xxx != &apos;&apos;&quot;&gt;</span><br><span class=\"line\">            and xxx like concat(concat(&apos;%&apos;, #&#123;xxx&#125;), &apos;%&apos;)</span><br><span class=\"line\">        &lt;/when&gt;</span><br><span class=\"line\">        &lt;otherwise&gt;</span><br><span class=\"line\">            and xxx like &apos;**%&apos;</span><br><span class=\"line\">        &lt;/otherwise&gt;</span><br><span class=\"line\">    &lt;/choose&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"SpringBoot的maven-git-commit-id-plugin使用","date":"2019-04-09T00:37:37.000Z","_content":"\n## Spring boot的maven-git-commit-id-plugin使用\n\n#### 背景\n\n在日常开发部署过程中，您是否遇到以下问题，多人合作时，测试环境不知道部署的哪个分支，测试同学也不清楚如何提bug？线上出现紧急bug，代码也不知道在哪个tag出的问题？是不是我们紧急需要一个接口能够清楚的知道部署的分支是哪个分支，谁部署的呢？这篇文章就是通过一个配置  *Maven git commit id插件*并创建Web服务。在此之后，版本信息会在每次构建过程中自动更新。\n\n###git commit id插件\n\n所有属性的详细信息可以在git commit id插件的[GitHub](https://github.com/ktoso/maven-git-commit-id-plugin)存储库中找到。\n\n1. 添加pom配置，插件部分\n\n```\n<plugin>\n    <groupId>pl.project13.maven</groupId>\n    <artifactId>git-commit-id-plugin</artifactId>\n    <version>2.2.4</version>\n    <executions>\n        <execution>\n            <id>get-the-git-infos</id>\n            <goals>\n                <goal>revision</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>\n        <prefix>git</prefix>\n        <verbose>false</verbose>\n        <generateGitPropertiesFile>true</generateGitPropertiesFile>\n    <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>\n        <format>json</format>\n        <gitDescribe>\n            <skip>false</skip>\n            <always>false</always>\n            <dirty>-dirty</dirty>\n        </gitDescribe>\n    </configuration>\n</plugin>\n```\n\n2. 运行maven build 构建，在targer/classes中，git.properties 文件中添加了JSON格式的版本信息\n\n```\n{\n  \"git.branch\" : \"master\",\n  \"git.build.host\" : \"jingshuodeMacBook-Pro-3.local\",\n  \"git.build.time\" : \"2019-04-07T13:00:13+0800\",\n  \"git.build.user.email\" : \"\",\n  \"git.build.user.name\" : \"\",\n  \"git.build.version\" : \"0.0.1-SNAPSHOT\",\n  \"git.closest.tag.commit.count\" : \"\",\n  \"git.closest.tag.name\" : \"\",\n  \"git.commit.id\" : \"6c6c0fbc1bc18a853d0b9b9361d95e61439f0cac\",\n  \"git.commit.id.abbrev\" : \"6c6c0fb\",\n  \"git.commit.id.describe\" : \"6c6c0fb\",\n  \"git.commit.id.describe-short\" : \"6c6c0fb\",\n  \"git.commit.message.full\" : \"Merge pull request #4 from nebulacollection/develop\\n\\nfeat:添加git commit 插件以及接口，便于打包时可以确定当前打包版本\",\n  \"git.commit.message.short\" : \"Merge pull request #4 from nebulacollection/develop\",\n  \"git.commit.time\" : \"2019-03-11T00:26:47+0800\",\n  \"git.commit.user.email\" : \"15763942407@163.com\",\n  \"git.commit.user.name\" : \"ZeyiY\",\n  \"git.dirty\" : \"false\",\n  \"git.remote.origin.url\" : \"https://github.com/nebulacollection/NebulaCollectionApi.git\",\n  \"git.tags\" : \"\"\n}\n```\n\n3. 版本信息添加到RESTful 接口中\n\n我们要做的就是读取git.properties 返回到接口中\n\n```\n@RestController\npublic class VersionController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(VersionController.class);\n\n\n    @RequestMapping(value = \"/version\", method = GET)\n    public String versionInformation() {\n        return readGitProperties();\n    }\n\n    private String readGitProperties() {\n        try {\n            ClassLoader classLoader = getClass().getClassLoader();\n            InputStream inputStream = classLoader.getResourceAsStream(\"git.properties\");\n            return readFromInputStream(inputStream);\n        } catch (IOException e) {\n            LOGGER.error(\"readGitProperties error\", e);\n            return \"Version information could not be retrieved\";\n        }\n    }\n\n    private String readFromInputStream(InputStream inputStream)\n            throws IOException {\n        StringBuilder resultStringBuilder = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                resultStringBuilder.append(line).append(\"\\n\");\n            }\n        }\n        return resultStringBuilder.toString();\n    }\n}\n```\n\n构建运行项目，在http:localhost:8080/\n\n```\n@RestController\npublic class VersionController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(VersionController.class);\n\n\n    @RequestMapping(value = \"/version\", method = GET)\n    public String versionInformation() {\n        return readGitProperties();\n    }\n\n    private String readGitProperties() {\n        try {\n            ClassLoader classLoader = getClass().getClassLoader();\n            InputStream inputStream = classLoader.getResourceAsStream(\"git.properties\");\n            return readFromInputStream(inputStream);\n        } catch (IOException e) {\n            LOGGER.error(\"readGitProperties error\", e);\n            return \"Version information could not be retrieved\";\n        }\n    }\n\n    private String readFromInputStream(InputStream inputStream)\n            throws IOException {\n        StringBuilder resultStringBuilder = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                resultStringBuilder.append(line).append(\"\\n\");\n            }\n        }\n        return resultStringBuilder.toString();\n    }\n}\n```\n\n构建运行项目，在http:localhost:8080/version 就可以看到构建信息。\n\n","source":"_posts/SpringBoot的maven-git-commit-id-plugin使用.md","raw":"---\ntitle: SpringBoot的maven-git-commit-id-plugin使用\ndate: 2019-04-09 08:37:37\ntags:\n---\n\n## Spring boot的maven-git-commit-id-plugin使用\n\n#### 背景\n\n在日常开发部署过程中，您是否遇到以下问题，多人合作时，测试环境不知道部署的哪个分支，测试同学也不清楚如何提bug？线上出现紧急bug，代码也不知道在哪个tag出的问题？是不是我们紧急需要一个接口能够清楚的知道部署的分支是哪个分支，谁部署的呢？这篇文章就是通过一个配置  *Maven git commit id插件*并创建Web服务。在此之后，版本信息会在每次构建过程中自动更新。\n\n###git commit id插件\n\n所有属性的详细信息可以在git commit id插件的[GitHub](https://github.com/ktoso/maven-git-commit-id-plugin)存储库中找到。\n\n1. 添加pom配置，插件部分\n\n```\n<plugin>\n    <groupId>pl.project13.maven</groupId>\n    <artifactId>git-commit-id-plugin</artifactId>\n    <version>2.2.4</version>\n    <executions>\n        <execution>\n            <id>get-the-git-infos</id>\n            <goals>\n                <goal>revision</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>\n        <prefix>git</prefix>\n        <verbose>false</verbose>\n        <generateGitPropertiesFile>true</generateGitPropertiesFile>\n    <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>\n        <format>json</format>\n        <gitDescribe>\n            <skip>false</skip>\n            <always>false</always>\n            <dirty>-dirty</dirty>\n        </gitDescribe>\n    </configuration>\n</plugin>\n```\n\n2. 运行maven build 构建，在targer/classes中，git.properties 文件中添加了JSON格式的版本信息\n\n```\n{\n  \"git.branch\" : \"master\",\n  \"git.build.host\" : \"jingshuodeMacBook-Pro-3.local\",\n  \"git.build.time\" : \"2019-04-07T13:00:13+0800\",\n  \"git.build.user.email\" : \"\",\n  \"git.build.user.name\" : \"\",\n  \"git.build.version\" : \"0.0.1-SNAPSHOT\",\n  \"git.closest.tag.commit.count\" : \"\",\n  \"git.closest.tag.name\" : \"\",\n  \"git.commit.id\" : \"6c6c0fbc1bc18a853d0b9b9361d95e61439f0cac\",\n  \"git.commit.id.abbrev\" : \"6c6c0fb\",\n  \"git.commit.id.describe\" : \"6c6c0fb\",\n  \"git.commit.id.describe-short\" : \"6c6c0fb\",\n  \"git.commit.message.full\" : \"Merge pull request #4 from nebulacollection/develop\\n\\nfeat:添加git commit 插件以及接口，便于打包时可以确定当前打包版本\",\n  \"git.commit.message.short\" : \"Merge pull request #4 from nebulacollection/develop\",\n  \"git.commit.time\" : \"2019-03-11T00:26:47+0800\",\n  \"git.commit.user.email\" : \"15763942407@163.com\",\n  \"git.commit.user.name\" : \"ZeyiY\",\n  \"git.dirty\" : \"false\",\n  \"git.remote.origin.url\" : \"https://github.com/nebulacollection/NebulaCollectionApi.git\",\n  \"git.tags\" : \"\"\n}\n```\n\n3. 版本信息添加到RESTful 接口中\n\n我们要做的就是读取git.properties 返回到接口中\n\n```\n@RestController\npublic class VersionController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(VersionController.class);\n\n\n    @RequestMapping(value = \"/version\", method = GET)\n    public String versionInformation() {\n        return readGitProperties();\n    }\n\n    private String readGitProperties() {\n        try {\n            ClassLoader classLoader = getClass().getClassLoader();\n            InputStream inputStream = classLoader.getResourceAsStream(\"git.properties\");\n            return readFromInputStream(inputStream);\n        } catch (IOException e) {\n            LOGGER.error(\"readGitProperties error\", e);\n            return \"Version information could not be retrieved\";\n        }\n    }\n\n    private String readFromInputStream(InputStream inputStream)\n            throws IOException {\n        StringBuilder resultStringBuilder = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                resultStringBuilder.append(line).append(\"\\n\");\n            }\n        }\n        return resultStringBuilder.toString();\n    }\n}\n```\n\n构建运行项目，在http:localhost:8080/\n\n```\n@RestController\npublic class VersionController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(VersionController.class);\n\n\n    @RequestMapping(value = \"/version\", method = GET)\n    public String versionInformation() {\n        return readGitProperties();\n    }\n\n    private String readGitProperties() {\n        try {\n            ClassLoader classLoader = getClass().getClassLoader();\n            InputStream inputStream = classLoader.getResourceAsStream(\"git.properties\");\n            return readFromInputStream(inputStream);\n        } catch (IOException e) {\n            LOGGER.error(\"readGitProperties error\", e);\n            return \"Version information could not be retrieved\";\n        }\n    }\n\n    private String readFromInputStream(InputStream inputStream)\n            throws IOException {\n        StringBuilder resultStringBuilder = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                resultStringBuilder.append(line).append(\"\\n\");\n            }\n        }\n        return resultStringBuilder.toString();\n    }\n}\n```\n\n构建运行项目，在http:localhost:8080/version 就可以看到构建信息。\n\n","slug":"SpringBoot的maven-git-commit-id-plugin使用","published":1,"updated":"2019-04-09T00:39:19.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjubbfox40008788avo71ebsl","content":"<h2 id=\"Spring-boot的maven-git-commit-id-plugin使用\"><a href=\"#Spring-boot的maven-git-commit-id-plugin使用\" class=\"headerlink\" title=\"Spring boot的maven-git-commit-id-plugin使用\"></a>Spring boot的maven-git-commit-id-plugin使用</h2><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>在日常开发部署过程中，您是否遇到以下问题，多人合作时，测试环境不知道部署的哪个分支，测试同学也不清楚如何提bug？线上出现紧急bug，代码也不知道在哪个tag出的问题？是不是我们紧急需要一个接口能够清楚的知道部署的分支是哪个分支，谁部署的呢？这篇文章就是通过一个配置  <em>Maven git commit id插件</em>并创建Web服务。在此之后，版本信息会在每次构建过程中自动更新。</p>\n<p>###git commit id插件</p>\n<p>所有属性的详细信息可以在git commit id插件的<a href=\"https://github.com/ktoso/maven-git-commit-id-plugin\" target=\"_blank\" rel=\"noopener\">GitHub</a>存储库中找到。</p>\n<ol>\n<li>添加pom配置，插件部分</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;pl.project13.maven&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;git-commit-id-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.2.4&lt;/version&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;get-the-git-infos&lt;/id&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;revision&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;dotGitDirectory&gt;$&#123;project.basedir&#125;/.git&lt;/dotGitDirectory&gt;</span><br><span class=\"line\">        &lt;prefix&gt;git&lt;/prefix&gt;</span><br><span class=\"line\">        &lt;verbose&gt;false&lt;/verbose&gt;</span><br><span class=\"line\">        &lt;generateGitPropertiesFile&gt;true&lt;/generateGitPropertiesFile&gt;</span><br><span class=\"line\">    &lt;generateGitPropertiesFilename&gt;$&#123;project.build.outputDirectory&#125;/git.properties&lt;/generateGitPropertiesFilename&gt;</span><br><span class=\"line\">        &lt;format&gt;json&lt;/format&gt;</span><br><span class=\"line\">        &lt;gitDescribe&gt;</span><br><span class=\"line\">            &lt;skip&gt;false&lt;/skip&gt;</span><br><span class=\"line\">            &lt;always&gt;false&lt;/always&gt;</span><br><span class=\"line\">            &lt;dirty&gt;-dirty&lt;/dirty&gt;</span><br><span class=\"line\">        &lt;/gitDescribe&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>运行maven build 构建，在targer/classes中，git.properties 文件中添加了JSON格式的版本信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;git.branch&quot; : &quot;master&quot;,</span><br><span class=\"line\">  &quot;git.build.host&quot; : &quot;jingshuodeMacBook-Pro-3.local&quot;,</span><br><span class=\"line\">  &quot;git.build.time&quot; : &quot;2019-04-07T13:00:13+0800&quot;,</span><br><span class=\"line\">  &quot;git.build.user.email&quot; : &quot;&quot;,</span><br><span class=\"line\">  &quot;git.build.user.name&quot; : &quot;&quot;,</span><br><span class=\"line\">  &quot;git.build.version&quot; : &quot;0.0.1-SNAPSHOT&quot;,</span><br><span class=\"line\">  &quot;git.closest.tag.commit.count&quot; : &quot;&quot;,</span><br><span class=\"line\">  &quot;git.closest.tag.name&quot; : &quot;&quot;,</span><br><span class=\"line\">  &quot;git.commit.id&quot; : &quot;6c6c0fbc1bc18a853d0b9b9361d95e61439f0cac&quot;,</span><br><span class=\"line\">  &quot;git.commit.id.abbrev&quot; : &quot;6c6c0fb&quot;,</span><br><span class=\"line\">  &quot;git.commit.id.describe&quot; : &quot;6c6c0fb&quot;,</span><br><span class=\"line\">  &quot;git.commit.id.describe-short&quot; : &quot;6c6c0fb&quot;,</span><br><span class=\"line\">  &quot;git.commit.message.full&quot; : &quot;Merge pull request #4 from nebulacollection/develop\\n\\nfeat:添加git commit 插件以及接口，便于打包时可以确定当前打包版本&quot;,</span><br><span class=\"line\">  &quot;git.commit.message.short&quot; : &quot;Merge pull request #4 from nebulacollection/develop&quot;,</span><br><span class=\"line\">  &quot;git.commit.time&quot; : &quot;2019-03-11T00:26:47+0800&quot;,</span><br><span class=\"line\">  &quot;git.commit.user.email&quot; : &quot;15763942407@163.com&quot;,</span><br><span class=\"line\">  &quot;git.commit.user.name&quot; : &quot;ZeyiY&quot;,</span><br><span class=\"line\">  &quot;git.dirty&quot; : &quot;false&quot;,</span><br><span class=\"line\">  &quot;git.remote.origin.url&quot; : &quot;https://github.com/nebulacollection/NebulaCollectionApi.git&quot;,</span><br><span class=\"line\">  &quot;git.tags&quot; : &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>版本信息添加到RESTful 接口中</li>\n</ol>\n<p>我们要做的就是读取git.properties 返回到接口中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class VersionController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Logger LOGGER = LoggerFactory.getLogger(VersionController.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/version&quot;, method = GET)</span><br><span class=\"line\">    public String versionInformation() &#123;</span><br><span class=\"line\">        return readGitProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String readGitProperties() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ClassLoader classLoader = getClass().getClassLoader();</span><br><span class=\"line\">            InputStream inputStream = classLoader.getResourceAsStream(&quot;git.properties&quot;);</span><br><span class=\"line\">            return readFromInputStream(inputStream);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            LOGGER.error(&quot;readGitProperties error&quot;, e);</span><br><span class=\"line\">            return &quot;Version information could not be retrieved&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String readFromInputStream(InputStream inputStream)</span><br><span class=\"line\">            throws IOException &#123;</span><br><span class=\"line\">        StringBuilder resultStringBuilder = new StringBuilder();</span><br><span class=\"line\">        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = br.readLine()) != null) &#123;</span><br><span class=\"line\">                resultStringBuilder.append(line).append(&quot;\\n&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultStringBuilder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构建运行项目，在http:localhost:8080/</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class VersionController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Logger LOGGER = LoggerFactory.getLogger(VersionController.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/version&quot;, method = GET)</span><br><span class=\"line\">    public String versionInformation() &#123;</span><br><span class=\"line\">        return readGitProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String readGitProperties() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ClassLoader classLoader = getClass().getClassLoader();</span><br><span class=\"line\">            InputStream inputStream = classLoader.getResourceAsStream(&quot;git.properties&quot;);</span><br><span class=\"line\">            return readFromInputStream(inputStream);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            LOGGER.error(&quot;readGitProperties error&quot;, e);</span><br><span class=\"line\">            return &quot;Version information could not be retrieved&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String readFromInputStream(InputStream inputStream)</span><br><span class=\"line\">            throws IOException &#123;</span><br><span class=\"line\">        StringBuilder resultStringBuilder = new StringBuilder();</span><br><span class=\"line\">        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = br.readLine()) != null) &#123;</span><br><span class=\"line\">                resultStringBuilder.append(line).append(&quot;\\n&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultStringBuilder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构建运行项目，在http:localhost:8080/version 就可以看到构建信息。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Spring-boot的maven-git-commit-id-plugin使用\"><a href=\"#Spring-boot的maven-git-commit-id-plugin使用\" class=\"headerlink\" title=\"Spring boot的maven-git-commit-id-plugin使用\"></a>Spring boot的maven-git-commit-id-plugin使用</h2><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>在日常开发部署过程中，您是否遇到以下问题，多人合作时，测试环境不知道部署的哪个分支，测试同学也不清楚如何提bug？线上出现紧急bug，代码也不知道在哪个tag出的问题？是不是我们紧急需要一个接口能够清楚的知道部署的分支是哪个分支，谁部署的呢？这篇文章就是通过一个配置  <em>Maven git commit id插件</em>并创建Web服务。在此之后，版本信息会在每次构建过程中自动更新。</p>\n<p>###git commit id插件</p>\n<p>所有属性的详细信息可以在git commit id插件的<a href=\"https://github.com/ktoso/maven-git-commit-id-plugin\" target=\"_blank\" rel=\"noopener\">GitHub</a>存储库中找到。</p>\n<ol>\n<li>添加pom配置，插件部分</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;pl.project13.maven&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;git-commit-id-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.2.4&lt;/version&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;get-the-git-infos&lt;/id&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;revision&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;dotGitDirectory&gt;$&#123;project.basedir&#125;/.git&lt;/dotGitDirectory&gt;</span><br><span class=\"line\">        &lt;prefix&gt;git&lt;/prefix&gt;</span><br><span class=\"line\">        &lt;verbose&gt;false&lt;/verbose&gt;</span><br><span class=\"line\">        &lt;generateGitPropertiesFile&gt;true&lt;/generateGitPropertiesFile&gt;</span><br><span class=\"line\">    &lt;generateGitPropertiesFilename&gt;$&#123;project.build.outputDirectory&#125;/git.properties&lt;/generateGitPropertiesFilename&gt;</span><br><span class=\"line\">        &lt;format&gt;json&lt;/format&gt;</span><br><span class=\"line\">        &lt;gitDescribe&gt;</span><br><span class=\"line\">            &lt;skip&gt;false&lt;/skip&gt;</span><br><span class=\"line\">            &lt;always&gt;false&lt;/always&gt;</span><br><span class=\"line\">            &lt;dirty&gt;-dirty&lt;/dirty&gt;</span><br><span class=\"line\">        &lt;/gitDescribe&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>运行maven build 构建，在targer/classes中，git.properties 文件中添加了JSON格式的版本信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;git.branch&quot; : &quot;master&quot;,</span><br><span class=\"line\">  &quot;git.build.host&quot; : &quot;jingshuodeMacBook-Pro-3.local&quot;,</span><br><span class=\"line\">  &quot;git.build.time&quot; : &quot;2019-04-07T13:00:13+0800&quot;,</span><br><span class=\"line\">  &quot;git.build.user.email&quot; : &quot;&quot;,</span><br><span class=\"line\">  &quot;git.build.user.name&quot; : &quot;&quot;,</span><br><span class=\"line\">  &quot;git.build.version&quot; : &quot;0.0.1-SNAPSHOT&quot;,</span><br><span class=\"line\">  &quot;git.closest.tag.commit.count&quot; : &quot;&quot;,</span><br><span class=\"line\">  &quot;git.closest.tag.name&quot; : &quot;&quot;,</span><br><span class=\"line\">  &quot;git.commit.id&quot; : &quot;6c6c0fbc1bc18a853d0b9b9361d95e61439f0cac&quot;,</span><br><span class=\"line\">  &quot;git.commit.id.abbrev&quot; : &quot;6c6c0fb&quot;,</span><br><span class=\"line\">  &quot;git.commit.id.describe&quot; : &quot;6c6c0fb&quot;,</span><br><span class=\"line\">  &quot;git.commit.id.describe-short&quot; : &quot;6c6c0fb&quot;,</span><br><span class=\"line\">  &quot;git.commit.message.full&quot; : &quot;Merge pull request #4 from nebulacollection/develop\\n\\nfeat:添加git commit 插件以及接口，便于打包时可以确定当前打包版本&quot;,</span><br><span class=\"line\">  &quot;git.commit.message.short&quot; : &quot;Merge pull request #4 from nebulacollection/develop&quot;,</span><br><span class=\"line\">  &quot;git.commit.time&quot; : &quot;2019-03-11T00:26:47+0800&quot;,</span><br><span class=\"line\">  &quot;git.commit.user.email&quot; : &quot;15763942407@163.com&quot;,</span><br><span class=\"line\">  &quot;git.commit.user.name&quot; : &quot;ZeyiY&quot;,</span><br><span class=\"line\">  &quot;git.dirty&quot; : &quot;false&quot;,</span><br><span class=\"line\">  &quot;git.remote.origin.url&quot; : &quot;https://github.com/nebulacollection/NebulaCollectionApi.git&quot;,</span><br><span class=\"line\">  &quot;git.tags&quot; : &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>版本信息添加到RESTful 接口中</li>\n</ol>\n<p>我们要做的就是读取git.properties 返回到接口中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class VersionController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Logger LOGGER = LoggerFactory.getLogger(VersionController.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/version&quot;, method = GET)</span><br><span class=\"line\">    public String versionInformation() &#123;</span><br><span class=\"line\">        return readGitProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String readGitProperties() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ClassLoader classLoader = getClass().getClassLoader();</span><br><span class=\"line\">            InputStream inputStream = classLoader.getResourceAsStream(&quot;git.properties&quot;);</span><br><span class=\"line\">            return readFromInputStream(inputStream);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            LOGGER.error(&quot;readGitProperties error&quot;, e);</span><br><span class=\"line\">            return &quot;Version information could not be retrieved&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String readFromInputStream(InputStream inputStream)</span><br><span class=\"line\">            throws IOException &#123;</span><br><span class=\"line\">        StringBuilder resultStringBuilder = new StringBuilder();</span><br><span class=\"line\">        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = br.readLine()) != null) &#123;</span><br><span class=\"line\">                resultStringBuilder.append(line).append(&quot;\\n&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultStringBuilder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构建运行项目，在http:localhost:8080/</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class VersionController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Logger LOGGER = LoggerFactory.getLogger(VersionController.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/version&quot;, method = GET)</span><br><span class=\"line\">    public String versionInformation() &#123;</span><br><span class=\"line\">        return readGitProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String readGitProperties() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ClassLoader classLoader = getClass().getClassLoader();</span><br><span class=\"line\">            InputStream inputStream = classLoader.getResourceAsStream(&quot;git.properties&quot;);</span><br><span class=\"line\">            return readFromInputStream(inputStream);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            LOGGER.error(&quot;readGitProperties error&quot;, e);</span><br><span class=\"line\">            return &quot;Version information could not be retrieved&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String readFromInputStream(InputStream inputStream)</span><br><span class=\"line\">            throws IOException &#123;</span><br><span class=\"line\">        StringBuilder resultStringBuilder = new StringBuilder();</span><br><span class=\"line\">        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = br.readLine()) != null) &#123;</span><br><span class=\"line\">                resultStringBuilder.append(line).append(&quot;\\n&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultStringBuilder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构建运行项目，在http:localhost:8080/version 就可以看到构建信息。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}